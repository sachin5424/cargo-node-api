"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tripListValidation = void 0;

var _import = require("../../../settings/import");

var _dataBase = require("../../../data-base");

var _driver = _interopRequireDefault(require("../../../data-base/models/driver"));

var _customer = _interopRequireDefault(require("../../../data-base/models/customer"));

var _vehicle = _interopRequireDefault(require("../../../data-base/models/vehicle"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const tripListValidation = [(0, _import.check)('tripCategory').notEmpty().withMessage("Something went wrong. Please try again!").custom(async value => {
  try {
    const result = await _dataBase.tripCategorieModel.findById(value);

    if (!result) {
      throw new Error("Something went wrong. Please try again!");
    }
  } catch (e) {
    throw new Error("Something went wrong. Please try again!");
  }
}), (0, _import.check)('driver').notEmpty().withMessage("Something went wrong. Please try again!").custom(async value => {
  try {
    const result = await _driver.default.findById(value);

    if (!result) {
      throw new Error("Driver is not available. Please try again!");
    }
  } catch (e) {
    throw new Error("Driver is not available. Please try again!");
  }
}), (0, _import.check)('customer').notEmpty().withMessage("Something went wrong. Please try again!").custom(async value => {
  try {
    const result = await _customer.default.findById(value);

    if (!result) {
      throw new Error("Something went wrong. Please try again!");
    }
  } catch (e) {
    throw new Error("Something went wrong. Please try again!");
  }
}), (0, _import.check)('vehicle').notEmpty().withMessage("Something went wrong. Please try again!").custom(async value => {
  try {
    const result = await _vehicle.default.findById(value);

    if (!result) {
      throw new Error("Vehicle is not available. Please try again!");
    }
  } catch (e) {
    throw new Error("Vehicle is not available. Please try again!");
  }
}), (0, _import.check)('pickupLocation').notEmpty().withMessage("Go back and fill pickup location").matches(/^-?([1-8]?[1-9]|[1-9]0)\.{1}\d{1,6}/).withMessage("Pickup location is not valid. Please go back refill pickup location"), (0, _import.check)('destinationLocation').notEmpty().withMessage("Go back and fill destination location").matches(/^-?([1-8]?[1-9]|[1-9]0)\.{1}\d{1,6}/).withMessage("Destination location is not valid. Please go back refill destination location")];
exports.tripListValidation = tripListValidation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2N1c3RvbWVycy90cmlwL19WYWxpZGF0aW9ucy5qcyJdLCJuYW1lcyI6WyJ0cmlwTGlzdFZhbGlkYXRpb24iLCJub3RFbXB0eSIsIndpdGhNZXNzYWdlIiwiY3VzdG9tIiwidmFsdWUiLCJyZXN1bHQiLCJ0cmlwQ2F0ZWdvcmllTW9kZWwiLCJmaW5kQnlJZCIsIkVycm9yIiwiZSIsIkRyaXZlck1vZGVsIiwiQ3VzdG9tZXJNb2RlbCIsIlZlaGljbGVNb2RlbCIsIm1hdGNoZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVPLE1BQU1BLGtCQUFrQixHQUFHLENBRTlCLG1CQUFNLGNBQU4sRUFDS0MsUUFETCxHQUNnQkMsV0FEaEIsQ0FDNEIseUNBRDVCLEVBRUtDLE1BRkwsQ0FFWSxNQUFPQyxLQUFQLElBQWlCO0FBQ3JCLE1BQUk7QUFDQSxVQUFNQyxNQUFNLEdBQUcsTUFBTUMsNkJBQW1CQyxRQUFuQixDQUE0QkgsS0FBNUIsQ0FBckI7O0FBQ0EsUUFBSSxDQUFDQyxNQUFMLEVBQWE7QUFDVCxZQUFNLElBQUlHLEtBQUosQ0FBVSx5Q0FBVixDQUFOO0FBQ0g7QUFDSixHQUxELENBS0UsT0FBT0MsQ0FBUCxFQUFVO0FBQ1IsVUFBTSxJQUFJRCxLQUFKLENBQVUseUNBQVYsQ0FBTjtBQUNIO0FBQ0osQ0FYTCxDQUY4QixFQWU5QixtQkFBTSxRQUFOLEVBQ0tQLFFBREwsR0FDZ0JDLFdBRGhCLENBQzRCLHlDQUQ1QixFQUVLQyxNQUZMLENBRVksTUFBT0MsS0FBUCxJQUFpQjtBQUNyQixNQUFJO0FBQ0EsVUFBTUMsTUFBTSxHQUFHLE1BQU1LLGdCQUFZSCxRQUFaLENBQXFCSCxLQUFyQixDQUFyQjs7QUFDQSxRQUFJLENBQUNDLE1BQUwsRUFBYTtBQUNULFlBQU0sSUFBSUcsS0FBSixDQUFVLDRDQUFWLENBQU47QUFDSDtBQUNKLEdBTEQsQ0FLRSxPQUFPQyxDQUFQLEVBQVU7QUFDUixVQUFNLElBQUlELEtBQUosQ0FBVSw0Q0FBVixDQUFOO0FBQ0g7QUFDSixDQVhMLENBZjhCLEVBNEI5QixtQkFBTSxVQUFOLEVBQ0tQLFFBREwsR0FDZ0JDLFdBRGhCLENBQzRCLHlDQUQ1QixFQUVLQyxNQUZMLENBRVksTUFBT0MsS0FBUCxJQUFpQjtBQUNyQixNQUFJO0FBQ0EsVUFBTUMsTUFBTSxHQUFHLE1BQU1NLGtCQUFjSixRQUFkLENBQXVCSCxLQUF2QixDQUFyQjs7QUFDQSxRQUFJLENBQUNDLE1BQUwsRUFBYTtBQUNULFlBQU0sSUFBSUcsS0FBSixDQUFVLHlDQUFWLENBQU47QUFDSDtBQUNKLEdBTEQsQ0FLRSxPQUFPQyxDQUFQLEVBQVU7QUFDUixVQUFNLElBQUlELEtBQUosQ0FBVSx5Q0FBVixDQUFOO0FBQ0g7QUFDSixDQVhMLENBNUI4QixFQXlDOUIsbUJBQU0sU0FBTixFQUNLUCxRQURMLEdBQ2dCQyxXQURoQixDQUM0Qix5Q0FENUIsRUFFS0MsTUFGTCxDQUVZLE1BQU9DLEtBQVAsSUFBaUI7QUFDckIsTUFBSTtBQUNBLFVBQU1DLE1BQU0sR0FBRyxNQUFNTyxpQkFBYUwsUUFBYixDQUFzQkgsS0FBdEIsQ0FBckI7O0FBQ0EsUUFBSSxDQUFDQyxNQUFMLEVBQWE7QUFDVCxZQUFNLElBQUlHLEtBQUosQ0FBVSw2Q0FBVixDQUFOO0FBQ0g7QUFDSixHQUxELENBS0UsT0FBT0MsQ0FBUCxFQUFVO0FBQ1IsVUFBTSxJQUFJRCxLQUFKLENBQVUsNkNBQVYsQ0FBTjtBQUNIO0FBQ0osQ0FYTCxDQXpDOEIsRUFzRDlCLG1CQUFNLGdCQUFOLEVBQ0tQLFFBREwsR0FDZ0JDLFdBRGhCLENBQzRCLGtDQUQ1QixFQUVLVyxPQUZMLENBRWEscUNBRmIsRUFFb0RYLFdBRnBELENBRWdFLHFFQUZoRSxDQXREOEIsRUEwRDlCLG1CQUFNLHFCQUFOLEVBQ0tELFFBREwsR0FDZ0JDLFdBRGhCLENBQzRCLHVDQUQ1QixFQUVLVyxPQUZMLENBRWEscUNBRmIsRUFFb0RYLFdBRnBELENBRWdFLCtFQUZoRSxDQTFEOEIsQ0FBM0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjaGVjayB9IGZyb20gJy4uLy4uLy4uL3NldHRpbmdzL2ltcG9ydCc7XHJcbmltcG9ydCB7IHRyaXBDYXRlZ29yaWVNb2RlbCB9IGZyb20gJy4uLy4uLy4uL2RhdGEtYmFzZSc7XHJcbmltcG9ydCBEcml2ZXJNb2RlbCBmcm9tICcuLi8uLi8uLi9kYXRhLWJhc2UvbW9kZWxzL2RyaXZlcic7XHJcbmltcG9ydCBDdXN0b21lck1vZGVsIGZyb20gJy4uLy4uLy4uL2RhdGEtYmFzZS9tb2RlbHMvY3VzdG9tZXInO1xyXG5pbXBvcnQgVmVoaWNsZU1vZGVsIGZyb20gJy4uLy4uLy4uL2RhdGEtYmFzZS9tb2RlbHMvdmVoaWNsZSc7XHJcblxyXG5leHBvcnQgY29uc3QgdHJpcExpc3RWYWxpZGF0aW9uID0gW1xyXG5cclxuICAgIGNoZWNrKCd0cmlwQ2F0ZWdvcnknKVxyXG4gICAgICAgIC5ub3RFbXB0eSgpLndpdGhNZXNzYWdlKFwiU29tZXRoaW5nIHdlbnQgd3JvbmcuIFBsZWFzZSB0cnkgYWdhaW4hXCIpXHJcbiAgICAgICAgLmN1c3RvbShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRyaXBDYXRlZ29yaWVNb2RlbC5maW5kQnlJZCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNvbWV0aGluZyB3ZW50IHdyb25nLiBQbGVhc2UgdHJ5IGFnYWluIVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU29tZXRoaW5nIHdlbnQgd3JvbmcuIFBsZWFzZSB0cnkgYWdhaW4hXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSksXHJcblxyXG4gICAgY2hlY2soJ2RyaXZlcicpXHJcbiAgICAgICAgLm5vdEVtcHR5KCkud2l0aE1lc3NhZ2UoXCJTb21ldGhpbmcgd2VudCB3cm9uZy4gUGxlYXNlIHRyeSBhZ2FpbiFcIilcclxuICAgICAgICAuY3VzdG9tKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgRHJpdmVyTW9kZWwuZmluZEJ5SWQodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEcml2ZXIgaXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIHRyeSBhZ2FpbiFcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRyaXZlciBpcyBub3QgYXZhaWxhYmxlLiBQbGVhc2UgdHJ5IGFnYWluIVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLFxyXG5cclxuICAgIGNoZWNrKCdjdXN0b21lcicpXHJcbiAgICAgICAgLm5vdEVtcHR5KCkud2l0aE1lc3NhZ2UoXCJTb21ldGhpbmcgd2VudCB3cm9uZy4gUGxlYXNlIHRyeSBhZ2FpbiFcIilcclxuICAgICAgICAuY3VzdG9tKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgQ3VzdG9tZXJNb2RlbC5maW5kQnlJZCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNvbWV0aGluZyB3ZW50IHdyb25nLiBQbGVhc2UgdHJ5IGFnYWluIVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU29tZXRoaW5nIHdlbnQgd3JvbmcuIFBsZWFzZSB0cnkgYWdhaW4hXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSksXHJcblxyXG4gICAgY2hlY2soJ3ZlaGljbGUnKVxyXG4gICAgICAgIC5ub3RFbXB0eSgpLndpdGhNZXNzYWdlKFwiU29tZXRoaW5nIHdlbnQgd3JvbmcuIFBsZWFzZSB0cnkgYWdhaW4hXCIpXHJcbiAgICAgICAgLmN1c3RvbShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFZlaGljbGVNb2RlbC5maW5kQnlJZCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZlaGljbGUgaXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIHRyeSBhZ2FpbiFcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZlaGljbGUgaXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIHRyeSBhZ2FpbiFcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSxcclxuXHJcbiAgICBjaGVjaygncGlja3VwTG9jYXRpb24nKVxyXG4gICAgICAgIC5ub3RFbXB0eSgpLndpdGhNZXNzYWdlKFwiR28gYmFjayBhbmQgZmlsbCBwaWNrdXAgbG9jYXRpb25cIilcclxuICAgICAgICAubWF0Y2hlcygvXi0/KFsxLThdP1sxLTldfFsxLTldMClcXC57MX1cXGR7MSw2fS8pLndpdGhNZXNzYWdlKFwiUGlja3VwIGxvY2F0aW9uIGlzIG5vdCB2YWxpZC4gUGxlYXNlIGdvIGJhY2sgcmVmaWxsIHBpY2t1cCBsb2NhdGlvblwiKSxcclxuICAgIFxyXG4gICAgY2hlY2soJ2Rlc3RpbmF0aW9uTG9jYXRpb24nKVxyXG4gICAgICAgIC5ub3RFbXB0eSgpLndpdGhNZXNzYWdlKFwiR28gYmFjayBhbmQgZmlsbCBkZXN0aW5hdGlvbiBsb2NhdGlvblwiKVxyXG4gICAgICAgIC5tYXRjaGVzKC9eLT8oWzEtOF0/WzEtOV18WzEtOV0wKVxcLnsxfVxcZHsxLDZ9Lykud2l0aE1lc3NhZ2UoXCJEZXN0aW5hdGlvbiBsb2NhdGlvbiBpcyBub3QgdmFsaWQuIFBsZWFzZSBnbyBiYWNrIHJlZmlsbCBkZXN0aW5hdGlvbiBsb2NhdGlvblwiKSxcclxuXHJcbl07XHJcbiJdfQ==