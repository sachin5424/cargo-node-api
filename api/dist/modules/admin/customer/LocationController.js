"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _expressValidator = require("express-validator");

var _CustomerService = _interopRequireDefault(require("../../../services/CustomerService"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class LocationController {
  static async list(req, res) {
    try {
      const errors = (0, _expressValidator.validationResult)(req);

      if (!errors.isEmpty()) {
        return res.status(422).json({
          message: errors.msg,
          errors: errors.errors
        });
      }

      const srvRes = await _CustomerService.default.listLocation(req?.query, req.query.customer);
      return res.status(srvRes.statusCode).json({
        srvRes
      });
    } catch (e) {
      return res.status(400).send({
        message: e.message
      });
    }
  }

  static async save(req, res) {
    try {
      const errors = (0, _expressValidator.validationResult)(req);

      if (!errors.isEmpty()) {
        return res.status(422).json({
          message: errors.msg,
          errors: errors.errors
        });
      }

      const srvRes = await _CustomerService.default.saveLocation(req.body);
      return res.status(srvRes.statusCode).json({
        srvRes
      });
    } catch (e) {
      return res.status(400).send({
        message: e.message
      });
    }
  }

  static async delete(req, res) {
    try {
      const srvRes = await _CustomerService.default.deleteLocation(req.params.id);
      return res.status(srvRes.statusCode).json({
        srvRes
      });
    } catch (e) {
      return res.status(400).send({
        message: e.message
      });
    }
  }

}

exports.default = LocationController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2FkbWluL2N1c3RvbWVyL0xvY2F0aW9uQ29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJMb2NhdGlvbkNvbnRyb2xsZXIiLCJsaXN0IiwicmVxIiwicmVzIiwiZXJyb3JzIiwiaXNFbXB0eSIsInN0YXR1cyIsImpzb24iLCJtZXNzYWdlIiwibXNnIiwic3J2UmVzIiwiU2VydmljZSIsImxpc3RMb2NhdGlvbiIsInF1ZXJ5IiwiY3VzdG9tZXIiLCJzdGF0dXNDb2RlIiwiZSIsInNlbmQiLCJzYXZlIiwic2F2ZUxvY2F0aW9uIiwiYm9keSIsImRlbGV0ZSIsImRlbGV0ZUxvY2F0aW9uIiwicGFyYW1zIiwiaWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVlLE1BQU1BLGtCQUFOLENBQXlCO0FBRW5CLGVBQUpDLElBQUksQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQVc7QUFDeEIsUUFBSTtBQUNBLFlBQU1DLE1BQU0sR0FBRyx3Q0FBaUJGLEdBQWpCLENBQWY7O0FBQ0EsVUFBSSxDQUFDRSxNQUFNLENBQUNDLE9BQVAsRUFBTCxFQUF1QjtBQUNuQixlQUFPRixHQUFHLENBQUNHLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUN4QkMsVUFBQUEsT0FBTyxFQUFFSixNQUFNLENBQUNLLEdBRFE7QUFFeEJMLFVBQUFBLE1BQU0sRUFBRUEsTUFBTSxDQUFDQTtBQUZTLFNBQXJCLENBQVA7QUFJSDs7QUFDVixZQUFNTSxNQUFNLEdBQUcsTUFBTUMseUJBQVFDLFlBQVIsQ0FBcUJWLEdBQUcsRUFBRVcsS0FBMUIsRUFBaUNYLEdBQUcsQ0FBQ1csS0FBSixDQUFVQyxRQUEzQyxDQUFyQjtBQUNTLGFBQU9YLEdBQUcsQ0FBQ0csTUFBSixDQUFXSSxNQUFNLENBQUNLLFVBQWxCLEVBQThCUixJQUE5QixDQUFtQztBQUFFRyxRQUFBQTtBQUFGLE9BQW5DLENBQVA7QUFDSCxLQVZELENBVUUsT0FBT00sQ0FBUCxFQUFVO0FBQ2pCLGFBQU9iLEdBQUcsQ0FBQ0csTUFBSixDQUFXLEdBQVgsRUFBZ0JXLElBQWhCLENBQXFCO0FBQUNULFFBQUFBLE9BQU8sRUFBRVEsQ0FBQyxDQUFDUjtBQUFaLE9BQXJCLENBQVA7QUFDQTtBQUNFOztBQUVnQixlQUFKVSxJQUFJLENBQUNoQixHQUFELEVBQU1DLEdBQU4sRUFBVztBQUN4QixRQUFJO0FBQ0EsWUFBTUMsTUFBTSxHQUFHLHdDQUFpQkYsR0FBakIsQ0FBZjs7QUFDQSxVQUFJLENBQUNFLE1BQU0sQ0FBQ0MsT0FBUCxFQUFMLEVBQXVCO0FBQ25CLGVBQU9GLEdBQUcsQ0FBQ0csTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQ3hCQyxVQUFBQSxPQUFPLEVBQUVKLE1BQU0sQ0FBQ0ssR0FEUTtBQUV4QkwsVUFBQUEsTUFBTSxFQUFFQSxNQUFNLENBQUNBO0FBRlMsU0FBckIsQ0FBUDtBQUlIOztBQUVWLFlBQU1NLE1BQU0sR0FBRyxNQUFNQyx5QkFBUVEsWUFBUixDQUFxQmpCLEdBQUcsQ0FBQ2tCLElBQXpCLENBQXJCO0FBQ1MsYUFBT2pCLEdBQUcsQ0FBQ0csTUFBSixDQUFXSSxNQUFNLENBQUNLLFVBQWxCLEVBQThCUixJQUE5QixDQUFtQztBQUFFRyxRQUFBQTtBQUFGLE9BQW5DLENBQVA7QUFDSCxLQVhELENBV0UsT0FBT00sQ0FBUCxFQUFVO0FBQ2pCLGFBQU9iLEdBQUcsQ0FBQ0csTUFBSixDQUFXLEdBQVgsRUFBZ0JXLElBQWhCLENBQXFCO0FBQUNULFFBQUFBLE9BQU8sRUFBRVEsQ0FBQyxDQUFDUjtBQUFaLE9BQXJCLENBQVA7QUFDQTtBQUNFOztBQUVrQixlQUFOYSxNQUFNLENBQUNuQixHQUFELEVBQU1DLEdBQU4sRUFBVztBQUMxQixRQUFJO0FBQ1QsWUFBTU8sTUFBTSxHQUFHLE1BQU1DLHlCQUFRVyxjQUFSLENBQXVCcEIsR0FBRyxDQUFDcUIsTUFBSixDQUFXQyxFQUFsQyxDQUFyQjtBQUNTLGFBQU9yQixHQUFHLENBQUNHLE1BQUosQ0FBV0ksTUFBTSxDQUFDSyxVQUFsQixFQUE4QlIsSUFBOUIsQ0FBbUM7QUFBRUcsUUFBQUE7QUFBRixPQUFuQyxDQUFQO0FBQ0gsS0FIRCxDQUdFLE9BQU9NLENBQVAsRUFBVTtBQUNqQixhQUFPYixHQUFHLENBQUNHLE1BQUosQ0FBVyxHQUFYLEVBQWdCVyxJQUFoQixDQUFxQjtBQUFDVCxRQUFBQSxPQUFPLEVBQUVRLENBQUMsQ0FBQ1I7QUFBWixPQUFyQixDQUFQO0FBQ0E7QUFDRTs7QUExQ21DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdmFsaWRhdGlvblJlc3VsdCB9IGZyb20gJ2V4cHJlc3MtdmFsaWRhdG9yJztcclxuaW1wb3J0IFNlcnZpY2UgZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvQ3VzdG9tZXJTZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvY2F0aW9uQ29udHJvbGxlciB7XHJcbiAgICBcclxuICAgIHN0YXRpYyBhc3luYyBsaXN0KHJlcSwgcmVzKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgZXJyb3JzID0gdmFsaWRhdGlvblJlc3VsdChyZXEpO1xyXG4gICAgICAgICAgICBpZiAoIWVycm9ycy5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQyMikuanNvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JzLm1zZyxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcnM6IGVycm9ycy5lcnJvcnNcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblx0XHRcdGNvbnN0IHNydlJlcyA9IGF3YWl0IFNlcnZpY2UubGlzdExvY2F0aW9uKHJlcT8ucXVlcnksIHJlcS5xdWVyeS5jdXN0b21lcilcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoc3J2UmVzLnN0YXR1c0NvZGUpLmpzb24oeyBzcnZSZXMgfSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cdFx0XHRyZXR1cm4gcmVzLnN0YXR1cyg0MDApLnNlbmQoe21lc3NhZ2U6IGUubWVzc2FnZX0pO1xyXG5cdFx0fVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBzYXZlKHJlcSwgcmVzKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgZXJyb3JzID0gdmFsaWRhdGlvblJlc3VsdChyZXEpO1xyXG4gICAgICAgICAgICBpZiAoIWVycm9ycy5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQyMikuanNvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JzLm1zZyxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcnM6IGVycm9ycy5lcnJvcnNcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG5cdFx0XHRjb25zdCBzcnZSZXMgPSBhd2FpdCBTZXJ2aWNlLnNhdmVMb2NhdGlvbihyZXEuYm9keSlcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoc3J2UmVzLnN0YXR1c0NvZGUpLmpzb24oeyBzcnZSZXMgfSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cdFx0XHRyZXR1cm4gcmVzLnN0YXR1cyg0MDApLnNlbmQoe21lc3NhZ2U6IGUubWVzc2FnZX0pO1xyXG5cdFx0fVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBkZWxldGUocmVxLCByZXMpIHtcclxuICAgICAgICB0cnkge1xyXG5cdFx0XHRjb25zdCBzcnZSZXMgPSBhd2FpdCBTZXJ2aWNlLmRlbGV0ZUxvY2F0aW9uKHJlcS5wYXJhbXMuaWQpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyhzcnZSZXMuc3RhdHVzQ29kZSkuanNvbih7IHNydlJlcyB9KTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcblx0XHRcdHJldHVybiByZXMuc3RhdHVzKDQwMCkuc2VuZCh7bWVzc2FnZTogZS5tZXNzYWdlfSk7XHJcblx0XHR9XHJcbiAgICB9XHJcblxyXG59Il19