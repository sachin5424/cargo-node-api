"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mongoose = require("mongoose");

var _bcryptjs = _interopRequireDefault(require("bcryptjs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const TripSchema = new _mongoose.Schema({
  tripCategory: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: "trip_categories"
  },
  driver: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: "driver"
  },
  customer: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: "customer"
  },
  vehicle: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: "vehicle"
  },
  pickupLocation: {
    name: String,
    latlong: String
  },
  destinationLocation: {
    name: String,
    latlong: String
  },
  dateTime: dateTime,
  status: {
    type: String,
    enum: ['driverComing', 'driverWaiting', 'cancel', 'complete']
  }
}, {
  timestamps: true
}); // TripSchema.pre('save', function (next) { return next(); });

TripSchema.pre('save', async function (next) {
  try {
    if (this.password) {
      const salt = await _bcryptjs.default.genSalt(10);
      this.password = await _bcryptjs.default.hash(this.password, salt);
    }
  } catch (err) {
    next(err);
  }

  next();
});
const TripModel = (0, _mongoose.model)('trip', TripSchema);
var _default = TripModel;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYXRhLWJhc2UvbW9kZWxzL3RyaXAuanMiXSwibmFtZXMiOlsiVHJpcFNjaGVtYSIsIlNjaGVtYSIsInRyaXBDYXRlZ29yeSIsInR5cGUiLCJUeXBlcyIsIk9iamVjdElkIiwicmVmIiwiZHJpdmVyIiwiY3VzdG9tZXIiLCJ2ZWhpY2xlIiwicGlja3VwTG9jYXRpb24iLCJuYW1lIiwiU3RyaW5nIiwibGF0bG9uZyIsImRlc3RpbmF0aW9uTG9jYXRpb24iLCJkYXRlVGltZSIsInN0YXR1cyIsImVudW0iLCJ0aW1lc3RhbXBzIiwicHJlIiwibmV4dCIsInBhc3N3b3JkIiwic2FsdCIsImJjcnlwdCIsImdlblNhbHQiLCJoYXNoIiwiZXJyIiwiVHJpcE1vZGVsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxVQUFVLEdBQUcsSUFBSUMsZ0JBQUosQ0FBVztBQUMxQkMsRUFBQUEsWUFBWSxFQUFFO0FBQ1ZDLElBQUFBLElBQUksRUFBRUYsaUJBQU9HLEtBQVAsQ0FBYUMsUUFEVDtBQUVWQyxJQUFBQSxHQUFHLEVBQUU7QUFGSyxHQURZO0FBSzFCQyxFQUFBQSxNQUFNLEVBQUU7QUFDSkosSUFBQUEsSUFBSSxFQUFFRixpQkFBT0csS0FBUCxDQUFhQyxRQURmO0FBRUpDLElBQUFBLEdBQUcsRUFBRTtBQUZELEdBTGtCO0FBUzFCRSxFQUFBQSxRQUFRLEVBQUU7QUFDTkwsSUFBQUEsSUFBSSxFQUFFRixpQkFBT0csS0FBUCxDQUFhQyxRQURiO0FBRU5DLElBQUFBLEdBQUcsRUFBRTtBQUZDLEdBVGdCO0FBYTFCRyxFQUFBQSxPQUFPLEVBQUU7QUFDTE4sSUFBQUEsSUFBSSxFQUFFRixpQkFBT0csS0FBUCxDQUFhQyxRQURkO0FBRUxDLElBQUFBLEdBQUcsRUFBRTtBQUZBLEdBYmlCO0FBaUIxQkksRUFBQUEsY0FBYyxFQUFFO0FBQ1pDLElBQUFBLElBQUksRUFBRUMsTUFETTtBQUVaQyxJQUFBQSxPQUFPLEVBQUVEO0FBRkcsR0FqQlU7QUFxQjFCRSxFQUFBQSxtQkFBbUIsRUFBRTtBQUNqQkgsSUFBQUEsSUFBSSxFQUFFQyxNQURXO0FBRWpCQyxJQUFBQSxPQUFPLEVBQUVEO0FBRlEsR0FyQks7QUF5QjFCRyxFQUFBQSxRQUFRLEVBQUVBLFFBekJnQjtBQTBCMUJDLEVBQUFBLE1BQU0sRUFBRTtBQUNKYixJQUFBQSxJQUFJLEVBQUVTLE1BREY7QUFFSkssSUFBQUEsSUFBSSxFQUFFLENBQUMsY0FBRCxFQUFpQixlQUFqQixFQUFrQyxRQUFsQyxFQUE0QyxVQUE1QztBQUZGO0FBMUJrQixDQUFYLEVBOEJoQjtBQUFFQyxFQUFBQSxVQUFVLEVBQUU7QUFBZCxDQTlCZ0IsQ0FBbkIsQyxDQWlDQTs7QUFHQWxCLFVBQVUsQ0FBQ21CLEdBQVgsQ0FBZSxNQUFmLEVBQXVCLGdCQUFnQkMsSUFBaEIsRUFBc0I7QUFDekMsTUFBRztBQUNDLFFBQUksS0FBS0MsUUFBVCxFQUFtQjtBQUNmLFlBQU1DLElBQUksR0FBRyxNQUFNQyxrQkFBT0MsT0FBUCxDQUFlLEVBQWYsQ0FBbkI7QUFDQSxXQUFLSCxRQUFMLEdBQWdCLE1BQU1FLGtCQUFPRSxJQUFQLENBQVksS0FBS0osUUFBakIsRUFBMkJDLElBQTNCLENBQXRCO0FBQ0g7QUFDSixHQUxELENBS0UsT0FBTUksR0FBTixFQUFVO0FBQ1JOLElBQUFBLElBQUksQ0FBQ00sR0FBRCxDQUFKO0FBQ0g7O0FBQ0ROLEVBQUFBLElBQUk7QUFDUCxDQVZEO0FBWUEsTUFBTU8sU0FBUyxHQUFHLHFCQUFNLE1BQU4sRUFBYzNCLFVBQWQsQ0FBbEI7ZUFFZTJCLFMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY2hlbWEsIG1vZGVsIH0gZnJvbSAnbW9uZ29vc2UnO1xyXG5pbXBvcnQgYmNyeXB0IGZyb20gXCJiY3J5cHRqc1wiO1xyXG5cclxuY29uc3QgVHJpcFNjaGVtYSA9IG5ldyBTY2hlbWEoe1xyXG4gICAgdHJpcENhdGVnb3J5OiB7XHJcbiAgICAgICAgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLFxyXG4gICAgICAgIHJlZjogXCJ0cmlwX2NhdGVnb3JpZXNcIixcclxuICAgIH0sXHJcbiAgICBkcml2ZXI6IHtcclxuICAgICAgICB0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsXHJcbiAgICAgICAgcmVmOiBcImRyaXZlclwiLFxyXG4gICAgfSxcclxuICAgIGN1c3RvbWVyOiB7XHJcbiAgICAgICAgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLFxyXG4gICAgICAgIHJlZjogXCJjdXN0b21lclwiLFxyXG4gICAgfSxcclxuICAgIHZlaGljbGU6IHtcclxuICAgICAgICB0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsXHJcbiAgICAgICAgcmVmOiBcInZlaGljbGVcIixcclxuICAgIH0sXHJcbiAgICBwaWNrdXBMb2NhdGlvbjoge1xyXG4gICAgICAgIG5hbWU6IFN0cmluZyxcclxuICAgICAgICBsYXRsb25nOiBTdHJpbmcsXHJcbiAgICB9LFxyXG4gICAgZGVzdGluYXRpb25Mb2NhdGlvbjoge1xyXG4gICAgICAgIG5hbWU6IFN0cmluZyxcclxuICAgICAgICBsYXRsb25nOiBTdHJpbmcsXHJcbiAgICB9LFxyXG4gICAgZGF0ZVRpbWU6IGRhdGVUaW1lLFxyXG4gICAgc3RhdHVzOiB7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIGVudW06IFsnZHJpdmVyQ29taW5nJywgJ2RyaXZlcldhaXRpbmcnLCAnY2FuY2VsJywgJ2NvbXBsZXRlJ10sXHJcbiAgICB9LFxyXG59LCB7IHRpbWVzdGFtcHM6IHRydWUgfSk7XHJcblxyXG5cclxuLy8gVHJpcFNjaGVtYS5wcmUoJ3NhdmUnLCBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gbmV4dCgpOyB9KTtcclxuXHJcblxyXG5UcmlwU2NoZW1hLnByZSgnc2F2ZScsIGFzeW5jIGZ1bmN0aW9uIChuZXh0KSB7XHJcbiAgICB0cnl7XHJcbiAgICAgICAgaWYgKHRoaXMucGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2FsdCA9IGF3YWl0IGJjcnlwdC5nZW5TYWx0KDEwKTtcclxuICAgICAgICAgICAgdGhpcy5wYXNzd29yZCA9IGF3YWl0IGJjcnlwdC5oYXNoKHRoaXMucGFzc3dvcmQsIHNhbHQpO1xyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2goZXJyKXtcclxuICAgICAgICBuZXh0KGVycik7XHJcbiAgICB9XHJcbiAgICBuZXh0KCk7XHJcbn0pO1xyXG5cclxuY29uc3QgVHJpcE1vZGVsID0gbW9kZWwoJ3RyaXAnLCBUcmlwU2NoZW1hKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRyaXBNb2RlbDsiXX0=