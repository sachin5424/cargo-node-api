"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mongoose = require("mongoose");

var _bcryptjs = _interopRequireDefault(require("bcryptjs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DriverSchema = new _mongoose.Schema({
  vehicle: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: "vehicle"
  },
  state: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: "state"
  },
  district: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: "district"
  },
  taluk: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: "taluk"
  },
  driverId: {
    type: Number,
    unique: true
  },
  // name: String,
  firstName: String,
  lastName: String,
  phoneNo: String,
  email: String,
  otpVerified: {
    type: Boolean,
    default: false
  },
  password: String,
  dob: Date,
  address: String,
  zipcode: String,
  photo: String,
  drivingLicenceNumber: String,
  drivingLicenceNumberExpiryDate: Date,
  drivingLicencePhoto: String,
  adharNo: String,
  adharCardPhoto: String,
  panNo: String,
  panCardPhoto: String,
  badgeNo: String,
  badgePhoto: String,
  isOnline: {
    type: Boolean,
    default: false
  },
  isApproved: {
    type: Boolean,
    default: false
  },
  isDeleted: {
    type: Boolean,
    default: false
  },
  isActive: {
    type: Boolean,
    default: false
  }
}, {
  timestamps: true
}); // DriverSchema.pre('save', function (next) { return next(); });

DriverSchema.pre('save', async function (next) {
  try {
    if (this.password) {
      const salt = await _bcryptjs.default.genSalt(10);
      this.password = await _bcryptjs.default.hash(this.password, salt);
    }
  } catch (err) {
    next(err);
  }

  next();
});
const DriverModel = (0, _mongoose.model)('driver', DriverSchema);
var _default = DriverModel;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYXRhLWJhc2UvbW9kZWxzL2RyaXZlci5qcyJdLCJuYW1lcyI6WyJEcml2ZXJTY2hlbWEiLCJTY2hlbWEiLCJ2ZWhpY2xlIiwidHlwZSIsIlR5cGVzIiwiT2JqZWN0SWQiLCJyZWYiLCJzdGF0ZSIsImRpc3RyaWN0IiwidGFsdWsiLCJkcml2ZXJJZCIsIk51bWJlciIsInVuaXF1ZSIsImZpcnN0TmFtZSIsIlN0cmluZyIsImxhc3ROYW1lIiwicGhvbmVObyIsImVtYWlsIiwib3RwVmVyaWZpZWQiLCJCb29sZWFuIiwiZGVmYXVsdCIsInBhc3N3b3JkIiwiZG9iIiwiRGF0ZSIsImFkZHJlc3MiLCJ6aXBjb2RlIiwicGhvdG8iLCJkcml2aW5nTGljZW5jZU51bWJlciIsImRyaXZpbmdMaWNlbmNlTnVtYmVyRXhwaXJ5RGF0ZSIsImRyaXZpbmdMaWNlbmNlUGhvdG8iLCJhZGhhck5vIiwiYWRoYXJDYXJkUGhvdG8iLCJwYW5ObyIsInBhbkNhcmRQaG90byIsImJhZGdlTm8iLCJiYWRnZVBob3RvIiwiaXNPbmxpbmUiLCJpc0FwcHJvdmVkIiwiaXNEZWxldGVkIiwiaXNBY3RpdmUiLCJ0aW1lc3RhbXBzIiwicHJlIiwibmV4dCIsInNhbHQiLCJiY3J5cHQiLCJnZW5TYWx0IiwiaGFzaCIsImVyciIsIkRyaXZlck1vZGVsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxZQUFZLEdBQUcsSUFBSUMsZ0JBQUosQ0FBVztBQUM1QkMsRUFBQUEsT0FBTyxFQUFFO0FBQ0xDLElBQUFBLElBQUksRUFBRUYsaUJBQU9HLEtBQVAsQ0FBYUMsUUFEZDtBQUVMQyxJQUFBQSxHQUFHLEVBQUU7QUFGQSxHQURtQjtBQUs1QkMsRUFBQUEsS0FBSyxFQUFFO0FBQ0hKLElBQUFBLElBQUksRUFBRUYsaUJBQU9HLEtBQVAsQ0FBYUMsUUFEaEI7QUFFSEMsSUFBQUEsR0FBRyxFQUFFO0FBRkYsR0FMcUI7QUFTNUJFLEVBQUFB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b3J0IHsgU2NoZW1hLCBtb2RlbCB9IGZyb20gJ21vbmdvb3NlJztcclxuaW1wb3J0IGJjcnlwdCBmcm9tIFwiYmNyeXB0anNcIjtcclxuXHJcbmNvbnN0IERyaXZlclNjaGVtYSA9IG5ldyBTY2hlbWEoe1xyXG4gICAgdmVoaWNsZToge1xyXG4gICAgICAgIHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCxcclxuICAgICAgICByZWY6IFwidmVoaWNsZVwiLFxyXG4gICAgfSxcclxuICAgIHN0YXRlOiB7XHJcbiAgICAgICAgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLFxyXG4gICAgICAgIHJlZjogXCJzdGF0ZVwiLFxyXG4gICAgfSxcclxuICAgIGRpc3RyaWN0OiB7XHJcbiAgICAgICAgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLFxyXG4gICAgICAgIHJlZjogXCJkaXN0cmljdFwiLFxyXG4gICAgfSxcclxuICAgIHRhbHVrOiB7XHJcbiAgICAgICAgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLFxyXG4gICAgICAgIHJlZjogXCJ0YWx1a1wiLFxyXG4gICAgfSxcclxuICAgIGRyaXZlcklkOiB7XHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgICAgIHVuaXF1ZTogdHJ1ZSxcclxuICAgIH0sXHJcbiAgICAvLyBuYW1lOiBTdHJpbmcsXHJcbiAgICBmaXJzdE5hbWU6IFN0cmluZyxcclxuICAgIGxhc3ROYW1lOiBTdHJpbmcsXHJcbiAgICBwaG9uZU5vOiBTdHJpbmcsXHJcbiAgICBlbWFpbDogU3RyaW5nLFxyXG4gICAgb3RwVmVyaWZpZWQ6IHsgXHJcbiAgICAgICAgdHlwZTogQm9vbGVhbiwgXHJcbiAgICAgICAgZGVmYXVsdDogZmFsc2UgXHJcbiAgICB9LFxyXG4gICAgcGFzc3dvcmQ6IFN0cmluZyxcclxuICAgIGRvYjogRGF0ZSxcclxuICAgIGFkZHJlc3M6IFN0cmluZyxcclxuICAgIHppcGNvZGU6IFN0cmluZyxcclxuICAgIHBob3RvOiBTdHJpbmcsXHJcbiAgICBcclxuICAgIGRyaXZpbmdMaWNlbmNlTnVtYmVyOiBTdHJpbmcsXHJcbiAgICBkcml2aW5nTGljZW5jZU51bWJlckV4cGlyeURhdGU6IERhdGUsXHJcbiAgICBkcml2aW5nTGljZW5jZVBob3RvOiBTdHJpbmcsXHJcblxyXG4gICAgYWRoYXJObzogU3RyaW5nLFxyXG4gICAgYWRoYXJDYXJkUGhvdG86IFN0cmluZyxcclxuXHJcbiAgICBwYW5ObzogU3RyaW5nLFxyXG4gICAgcGFuQ2FyZFBob3RvOiBTdHJpbmcsXHJcblxyXG4gICAgYmFkZ2VObzogU3RyaW5nLFxyXG4gICAgYmFkZ2VQaG90bzogU3RyaW5nLFxyXG5cclxuICAgIGlzT25saW5lOiB7XHJcbiAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxyXG4gICAgfSxcclxuXHJcbiAgICBpc0FwcHJvdmVkOiB7XHJcbiAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxyXG4gICAgfSxcclxuXHJcbiAgICBpc0RlbGV0ZWQ6IHtcclxuICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgaXNBY3RpdmU6IHtcclxuICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlXHJcbiAgICB9LFxyXG59LCB7IHRpbWVzdGFtcHM6IHRydWUgfSk7XHJcblxyXG5cclxuLy8gRHJpdmVyU2NoZW1hLnByZSgnc2F2ZScsIGZ1bmN0aW9uIChuZXh0KSB7IHJldHVybiBuZXh0KCk7IH0pO1xyXG5cclxuXHJcbkRyaXZlclNjaGVtYS5wcmUoJ3NhdmUnLCBhc3luYyBmdW5jdGlvbiAobmV4dCkge1xyXG4gICAgdHJ5e1xyXG4gICAgICAgIGlmICh0aGlzLnBhc3N3b3JkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNhbHQgPSBhd2FpdCBiY3J5cHQuZ2VuU2FsdCgxMCk7XHJcbiAgICAgICAgICAgIHRoaXMucGFzc3dvcmQgPSBhd2FpdCBiY3J5cHQuaGFzaCh0aGlzLnBhc3N3b3JkLCBzYWx0KTtcclxuICAgICAgICB9XHJcbiAgICB9IGNhdGNoKGVycil7XHJcbiAgICAgICAgbmV4dChlcnIpO1xyXG4gICAgfVxyXG4gICAgbmV4dCgpO1xyXG59KTtcclxuXHJcbmNvbnN0IERyaXZlck1vZGVsID0gbW9kZWwoJ2RyaXZlcicsIERyaXZlclNjaGVtYSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEcml2ZXJNb2RlbDsiXX0=