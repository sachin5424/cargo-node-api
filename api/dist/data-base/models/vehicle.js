"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mongoose = require("mongoose");

const VehicleSchema = new _mongoose.Schema({
  serviceType: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: "serviceType"
  },
  rideTypes: [{
    type: _mongoose.Schema.Types.ObjectId,
    ref: "rideType"
  }],
  vehicleCategory: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: "vehicleCategory"
  },
  // driver: {
  //     type: Schema.Types.ObjectId,
  //     ref: 'driver',
  // },
  state: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: "state"
  },
  district: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: "district"
  },
  taluk: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: "taluk"
  },
  make: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: "make"
  },
  model: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: "makeModel"
  },
  color: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: "color"
  },
  vehicleId: {
    type: Number,
    unique: true
  },
  name: String,
  vehicleNumber: String,
  availableSeats: Number,
  availableCapacity: Number,
  manufacturingYear: Number,
  primaryPhoto: String,
  otherPhotos: [{
    type: String
  }],
  registrationNumber: String,
  registrationExpiryDate: Date,
  registrationPhoto: String,
  insuranceNumber: String,
  insuranceExpiryDate: Date,
  insurancePhoto: String,
  permitNumber: String,
  permitExpiryDate: Date,
  permitPhoto: String,
  pollutionNumber: String,
  pollutionExpiryDate: Date,
  pollutionPhoto: String,
  isApproved: {
    type: Boolean,
    default: false
  },
  addedBy: {
    type: String,
    enum: ['admin', 'driver'],
    default: 'driver'
  },
  isDeleted: {
    type: Boolean,
    default: false
  },
  isActive: {
    type: Boolean,
    default: false
  }
}, {
  timestamps: true
}); // VehicleSchema.pre('save', function (next) { return next(); });

const VehicleModel = (0, _mongoose.model)('vehicle', VehicleSchema);
var _default = VehicleModel;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYXRhLWJhc2UvbW9kZWxzL3ZlaGljbGUuanMiXSwibmFtZXMiOlsiVmVoaWNsZVNjaGVtYSIsIlNjaGVtYSIsInNlcnZpY2VUeXBlIiwidHlwZSIsIlR5cGVzIiwiT2JqZWN0SWQiLCJyZWYiLCJyaWRlVHlwZXMiLCJ2ZWhpY2xlQ2F0ZWdvcnkiLCJzdGF0ZSIsImRpc3RyaWN0IiwidGFsdWsiLCJtYWtlIiwibW9kZWwiLCJjb2xvciIsInZlaGljbGVJZCIsIk51bWJlciIsInVuaXF1ZSIsIm5hbWUiLCJTdHJpbmciLCJ2ZWhpY2xlTnVtYmVyIiwiYXZhaWxhYmxlU2VhdHMiLCJhdmFpbGFibGVDYXBhY2l0eSIsIm1hbnVmYWN0dXJpbmdZZWFyIiwicHJpbWFyeVBob3RvIiwib3RoZXJQaG90b3MiLCJyZWdpc3RyYXRpb25OdW1iZXIiLCJyZWdpc3RyYXRpb25FeHBpcnlEYXRlIiwiRGF0ZSIsInJlZ2lzdHJhdGlvblBob3RvIiwiaW5zdXJhbmNlTnVtYmVyIiwiaW5zdXJhbmNlRXhwaXJ5RGF0ZSIsImluc3VyYW5jZVBob3RvIiwicGVybWl0TnVtYmVyIiwicGVybWl0RXhwaXJ5RGF0ZSIsInBlcm1pdFBob3RvIiwicG9sbHV0aW9uTnVtYmVyIiwicG9sbHV0aW9uRXhwaXJ5RGF0ZSIsInBvbGx1dGlvblBob3RvIiwiaXNBcHByb3ZlZCIsIkJvb2xlYW4iLCJkZWZhdWx0IiwiYWRkZWRCeSIsImVudW0iLCJpc0RlbGV0ZWQiLCJpc0FjdGl2ZSIsInRpbWVzdGFtcHMiLCJWZWhpY2xlTW9kZWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQSxNQUFNQSxhQUFhLEdBQUcsSUFBSUMsZ0JBQUosQ0FBVztBQUM3QkMsRUFBQUEsV0FBVyxFQUFFO0FBQ1RDLElBQUFBLElBQUksRUFBRUYsaUJBQU9HLEtBQVAsQ0FBYUMsUUFEVjtBQUVUQyxJQUFBQSxHQUFHLEVBQUU7QUFGSSxHQURnQjtBQUs3QkMsRUFBQUEsU0FBUyxFQUFF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b0I7QUFpRjdCRyxFQUFBQSxTQUFTLEVBQUU7QUFDUHpDLElBQUFBLElBQUksRUFBRXFDLE9BREM7QUFFUEMsSUFBQUEsT0FBTyxFQUFFO0FBRkYsR0FqRmtCO0FBcUY3QkksRUFBQUEsUUFBUSxFQUFFO0FBQ04xQyxJQUFBQSxJQUFJLEVBQUVxQyxPQURBO0FBRU5DLElBQUFBLE9BQU8sRUFBRTtBQUZIO0FBckZtQixDQUFYLEVBeUZuQjtBQUFFSyxFQUFBQSxVQUFVLEVBQUU7QUFBZCxDQXpGbUIsQ0FBdEIsQyxDQTRGQTs7QUFFQSxNQUFNQyxZQUFZLEdBQUcscUJBQU0sU0FBTixFQUFpQi9DLGFBQWpCLENBQXJCO2VBRWUrQyxZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2NoZW1hLCBtb2RlbCB9IGZyb20gJ21vbmdvb3NlJztcclxuXHJcbmNvbnN0IFZlaGljbGVTY2hlbWEgPSBuZXcgU2NoZW1hKHtcclxuICAgIHNlcnZpY2VUeXBlOiB7XHJcbiAgICAgICAgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLFxyXG4gICAgICAgIHJlZjogXCJzZXJ2aWNlVHlwZVwiLFxyXG4gICAgfSxcclxuICAgIHJpZGVUeXBlczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLFxyXG4gICAgICAgICAgICByZWY6IFwicmlkZVR5cGVcIixcclxuICAgICAgICB9XHJcbiAgICBdLFxyXG4gICAgdmVoaWNsZUNhdGVnb3J5OiB7XHJcbiAgICAgICAgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLFxyXG4gICAgICAgIHJlZjogXCJ2ZWhpY2xlQ2F0ZWdvcnlcIixcclxuICAgIH0sXHJcbiAgICAvLyBkcml2ZXI6IHtcclxuICAgIC8vICAgICB0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsXHJcbiAgICAvLyAgICAgcmVmOiAnZHJpdmVyJyxcclxuICAgIC8vIH0sXHJcbiAgICBzdGF0ZToge1xyXG4gICAgICAgIHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCxcclxuICAgICAgICByZWY6IFwic3RhdGVcIixcclxuICAgIH0sXHJcbiAgICBkaXN0cmljdDoge1xyXG4gICAgICAgIHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCxcclxuICAgICAgICByZWY6IFwiZGlzdHJpY3RcIixcclxuICAgIH0sXHJcbiAgICB0YWx1azoge1xyXG4gICAgICAgIHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCxcclxuICAgICAgICByZWY6IFwidGFsdWtcIixcclxuICAgIH0sXHJcbiAgICBtYWtlOiB7XHJcbiAgICAgICAgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLFxyXG4gICAgICAgIHJlZjogXCJtYWtlXCIsXHJcbiAgICB9LFxyXG4gICAgbW9kZWw6IHtcclxuICAgICAgICB0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsXHJcbiAgICAgICAgcmVmOiBcIm1ha2VNb2RlbFwiLFxyXG4gICAgfSxcclxuICAgIGNvbG9yOiB7XHJcbiAgICAgICAgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLFxyXG4gICAgICAgIHJlZjogXCJjb2xvclwiLFxyXG4gICAgfSxcclxuICAgIHZlaGljbGVJZDoge1xyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgICAgICB1bmlxdWU6IHRydWUsXHJcbiAgICB9LFxyXG4gICAgbmFtZTogU3RyaW5nLFxyXG4gICAgdmVoaWNsZU51bWJlcjogU3RyaW5nLFxyXG4gICAgYXZhaWxhYmxlU2VhdHM6IE51bWJlcixcclxuICAgIGF2YWlsYWJsZUNhcGFjaXR5OiBOdW1iZXIsXHJcbiAgICBtYW51ZmFjdHVyaW5nWWVhcjogTnVtYmVyLFxyXG5cclxuICAgIHByaW1hcnlQaG90bzogU3RyaW5nLFxyXG4gICAgb3RoZXJQaG90b3M6IFt7IHR5cGU6IFN0cmluZyB9XSxcclxuXHJcbiAgICByZWdpc3RyYXRpb25OdW1iZXI6IFN0cmluZyxcclxuICAgIHJlZ2lzdHJhdGlvbkV4cGlyeURhdGU6IERhdGUsXHJcbiAgICByZWdpc3RyYXRpb25QaG90bzogU3RyaW5nLFxyXG4gICAgXHJcbiAgICBpbnN1cmFuY2VOdW1iZXI6IFN0cmluZyxcclxuICAgIGluc3VyYW5jZUV4cGlyeURhdGU6IERhdGUsXHJcbiAgICBpbnN1cmFuY2VQaG90bzogU3RyaW5nLFxyXG4gICAgXHJcbiAgICBwZXJtaXROdW1iZXI6IFN0cmluZyxcclxuICAgIHBlcm1pdEV4cGlyeURhdGU6IERhdGUsXHJcbiAgICBwZXJtaXRQaG90bzogU3RyaW5nLFxyXG4gICAgXHJcbiAgICBwb2xsdXRpb25OdW1iZXI6IFN0cmluZyxcclxuICAgIHBvbGx1dGlvbkV4cGlyeURhdGU6IERhdGUsXHJcbiAgICBwb2xsdXRpb25QaG90bzogU3RyaW5nLFxyXG5cclxuICAgIGlzQXBwcm92ZWQ6IHtcclxuICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlXHJcbiAgICB9LCAgICBcclxuICAgIGFkZGVkQnk6IHtcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgZW51bTogWydhZG1pbicsICdkcml2ZXInXSxcclxuICAgICAgICBkZWZhdWx0OiAnZHJpdmVyJ1xyXG4gICAgfSwgICAgXHJcbiAgICBpc0RlbGV0ZWQ6IHtcclxuICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgaXNBY3RpdmU6IHtcclxuICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlXHJcbiAgICB9LFxyXG59LCB7IHRpbWVzdGFtcHM6IHRydWUgfSk7XHJcblxyXG5cclxuLy8gVmVoaWNsZVNjaGVtYS5wcmUoJ3NhdmUnLCBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gbmV4dCgpOyB9KTtcclxuXHJcbmNvbnN0IFZlaGljbGVNb2RlbCA9IG1vZGVsKCd2ZWhpY2xlJywgVmVoaWNsZVNjaGVtYSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBWZWhpY2xlTW9kZWw7Il19