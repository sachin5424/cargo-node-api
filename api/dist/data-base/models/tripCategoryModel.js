"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tripCategorieModel = void 0;

var _mongoose = _interopRequireDefault(require("mongoose"));

var _moment = _interopRequireDefault(require("moment"));

var _mongoosePaginateV = _interopRequireDefault(require("mongoose-paginate-v2"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Scheam = new _mongoose.default.Schema({
  name: {
    type: String,
    required: true,
    lowercase: true,
    unique: true
  },
  icon: {
    type: String,
    default: null
  },
  active: {
    type: Number,
    default: 1
  },
  slug: {
    type: String
  },
  isdeleted: {
    type: Number,
    default: 0
  },
  activeLog: [{
    userId: {
      type: _mongoose.default.Schema.Types.ObjectId,
      ref: "users"
    },
    method: {
      type: String,
      enum: ['GET', 'POST', 'DELETED', 'UPDATE']
    },
    oldData: {
      type: String,
      default: null
    },
    newData: {
      type: String,
      default: null
    },
    time: {
      type: Date,
      default: (0, _moment.default)()
    }
  }]
}, {
  timestamps: true
});
Scheam.plugin(_mongoosePaginateV.default);

const tripCategorieModel = _mongoose.default.model('trip_categories', Scheam);

exports.tripCategorieModel = tripCategorieModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYXRhLWJhc2UvbW9kZWxzL3RyaXBDYXRlZ29yeU1vZGVsLmpzIl0sIm5hbWVzIjpbIlNjaGVhbSIsIm1vbmdvb3NlIiwiU2NoZW1hIiwibmFtZSIsInR5cGUiLCJTdHJpbmciLCJyZXF1aXJlZCIsImxvd2VyY2FzZSIsInVuaXF1ZSIsImljb24iLCJkZWZhdWx0IiwiYWN0aXZlIiwiTnVtYmVyIiwic2x1ZyIsImlzZGVsZXRlZCIsImFjdGl2ZUxvZyIsInVzZXJJZCIsIlR5cGVzIiwiT2JqZWN0SWQiLCJyZWYiLCJtZXRob2QiLCJlbnVtIiwib2xkRGF0YSIsIm5ld0RhdGEiLCJ0aW1lIiwiRGF0ZSIsInRpbWVzdGFtcHMiLCJwbHVnaW4iLCJtb25nb29zZVBhZ2luYXRlIiwidHJpcENhdGVnb3JpZU1vZGVsIiwibW9kZWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7OztBQUNBLE1BQU1BLE1BQU0sR0FBRyxJQUFJQyxrQkFBU0MsTUFBYixDQUFvQjtBQUMvQkMsRUFBQUEsSUFBSSxFQUFFO0FBQ0ZDLElBQUFBLElBQUksRUFBRUMsTUFESjtBQUVGQyxJQUFBQSxRQUFRLEVBQUUsSUFGUjtBQUdGQyxJQUFBQSxTQUFTLEVBQUUsSUFIVDtBQUlGQyxJQUFBQSxNQUFNLEVBQUU7QUFKTixHQUR5QjtBQU8vQkMsRUFBQUEsSUFBSSxFQUFFO0FBQ0ZMLElBQUFBLElBQUksRUFBRUMsTUFESjtBQUVGSyxJQUFBQSxPQUFPLEVBQUU7QUFGUCxHQVB5QjtBQVcvQkMsRUFBQUEsTUFBTSxFQUFFO0FBQ0pQLElBQUFBLElBQUksRUFBRVEsTUFERjtBQUVKRixJQUFBQSxPQUFPLEVBQUU7QUFGTCxHQVh1QjtBQWUvQkcsRUFBQUEsSUFBSSxFQUFFO0FBQ0ZULElBQUFBLElBQUksRUFBRUM7QUFESixHQWZ5QjtBQWtCL0JTLEVBQUFBLFNBQVMsRUFBRTtBQUNQVixJQUFBQSxJQUFJLEVBQUVRLE1BREM7QUFFUEYsSUFBQUEsT0FBTyxFQUFFO0FBRkYsR0FsQm9CO0FBc0IvQkssRUFBQUEsU0FBUyxFQUFFLENBQ1A7QUFDSUMsSUFBQUEsTUFBTSxFQUFFO0FBQ0paLE1BQUFBLElBQUksRUFBRUgsa0JBQVNDLE1BQVQsQ0FBZ0JlLEtBQWhCLENBQXNCQyxRQUR4QjtBQUVKQyxNQUFBQSxHQUFHLEVBQUU7QUFGRCxLQURaO0FBS0lDLElBQUFBLE1BQU0sRUFBRTtBQUNKaEIsTUFBQUEsSUFBSSxFQUFFQyxNQURGO0FBRUpnQixNQUFBQSxJQUFJLEVBQUUsQ0FBQyxLQUFELEVBQVEsTUFBUixFQUFnQixTQUFoQixFQUEyQixRQUEzQjtBQUZGLEtBTFo7QUFTSUMsSUFBQUEsT0FBTyxFQUFFO0FBQ0xsQixNQUFBQSxJQUFJLEVBQUVDLE1BREQ7QUFFTEssTUFBQUEsT0FBTyxFQUFFO0FBRkosS0FUYjtBQWFJYSxJQUFBQSxPQUFPLEVBQUU7QUFDTG5CLE1BQUFBLElBQUksRUFBRUMsTUFERDtBQUVMSyxNQUFBQSxPQUFPLEVBQUU7QUFGSixLQWJiO0FBaUJJYyxJQUFBQSxJQUFJLEVBQUU7QUFDRnBCLE1BQUFBLElBQUksRUFBRXFCLElBREo7QUFFRmYsTUFBQUEsT0FBTyxFQUFFO0FBRlA7QUFqQlYsR0FETztBQXRCb0IsQ0FBcEIsRUE4Q1o7QUFBRWdCLEVBQUFBLFVBQVUsRUFBRTtBQUFkLENBOUNZLENBQWY7QUErQ0ExQixNQUFNLENBQUMyQixNQUFQLENBQWNDLDBCQUFkOztBQUNBLE1BQU1DLGtCQUFrQixHQUFHNUIsa0JBQVM2QixLQUFULENBQWUsaUJBQWYsRUFBa0M5QixNQUFsQyxDQUEzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb25nb29zZSBmcm9tICdtb25nb29zZSc7XHJcbmltcG9ydCBtb21lbnQgZnJvbSBcIm1vbWVudFwiO1xyXG5pbXBvcnQgbW9uZ29vc2VQYWdpbmF0ZSBmcm9tICdtb25nb29zZS1wYWdpbmF0ZS12Mic7XHJcbmNvbnN0IFNjaGVhbSA9IG5ldyBtb25nb29zZS5TY2hlbWEoe1xyXG4gICAgbmFtZToge1xyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgICAgICBsb3dlcmNhc2U6IHRydWUsXHJcbiAgICAgICAgdW5pcXVlOiB0cnVlLFxyXG4gICAgfSxcclxuICAgIGljb246IHtcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgZGVmYXVsdDogbnVsbFxyXG4gICAgfSxcclxuICAgIGFjdGl2ZToge1xyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgICAgICBkZWZhdWx0OiAxXHJcbiAgICB9LFxyXG4gICAgc2x1Zzoge1xyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgIH0sXHJcbiAgICBpc2RlbGV0ZWQ6IHtcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICAgICAgZGVmYXVsdDogMFxyXG4gICAgfSxcclxuICAgIGFjdGl2ZUxvZzogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdXNlcklkOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBtb25nb29zZS5TY2hlbWEuVHlwZXMuT2JqZWN0SWQsXHJcbiAgICAgICAgICAgICAgICByZWY6IFwidXNlcnNcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWV0aG9kOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgICAgICAgICBlbnVtOiBbJ0dFVCcsICdQT1NUJywgJ0RFTEVURUQnLCAnVVBEQVRFJ11cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb2xkRGF0YToge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogbnVsbFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBuZXdEYXRhOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBudWxsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRpbWU6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IERhdGUsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBtb21lbnQoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgXSxcclxufSwgeyB0aW1lc3RhbXBzOiB0cnVlIH0pO1xyXG5TY2hlYW0ucGx1Z2luKG1vbmdvb3NlUGFnaW5hdGUpO1xyXG5jb25zdCB0cmlwQ2F0ZWdvcmllTW9kZWwgPSBtb25nb29zZS5tb2RlbCgndHJpcF9jYXRlZ29yaWVzJywgU2NoZWFtKTtcclxuZXhwb3J0IHsgdHJpcENhdGVnb3JpZU1vZGVsIH07XHJcbiJdfQ==