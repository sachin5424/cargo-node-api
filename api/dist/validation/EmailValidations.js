"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.templateValidation = exports.sendEmailValidation = void 0;

var _import = require("../settings/import");

var _emailTemplate = _interopRequireDefault(require("../data-base/models/emailTemplate"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const templateValidation = [(0, _import.check)('_id').optional().notEmpty().withMessage("Provide / Select a valid data").custom(async v => {
  try {
    const r = await _emailTemplate.default.findOne({
      _id: v
    });

    if (!r) {
      throw new Error("Data not found");
    }
  } catch (e) {
    throw new Error("This data does not exit. Please check or refresh");
  }
}), (0, _import.check)('subject').notEmpty().withMessage("The 'Subject' field is required").isString().withMessage("The 'Subject' field is not valid"), (0, _import.check)('key').notEmpty().withMessage("The 'key' field is required").isSlug().withMessage("The 'key' field is not valid").custom(async (value, {
  req
}) => {
  const body = req.body;
  const result = await _emailTemplate.default.findOne({
    key: value
  });

  if (result) {
    if (body._id) {
      if (result._id != body._id) {
        throw new Error("A template already exist with this key");
      }
    } else {
      throw new Error("A template already exist with this key");
    }
  }
}), (0, _import.check)('html').notEmpty().withMessage("The 'Template Code' field is required").isString().withMessage("The 'Template Code' field is not valid")];
exports.templateValidation = templateValidation;
const sendEmailValidation = [(0, _import.check)('template').notEmpty().withMessage("The 'Template' field is required").custom(async (value, {
  req
}) => {
  if (value === 'custom') {
    if (!req.body?.subject) {
      throw new Error("The 'Subject' field is required");
    }

    if (!req.body?.html) {
      throw new Error("The 'Template Design' field is required");
    }
  }
}), (0, _import.check)('to').notEmpty().withMessage("The 'Send To' field is required").isIn(['manyCustomers', 'manyDrivers', 'manyAdmins', 'allCustomers', 'allDrivers', 'allAdmins', 'custom']).withMessage("The 'Send To' field is not valid.").custom(async (value, {
  req
}) => {
  if (!['allCustomers', 'allDrivers', 'allAdmins'].includes(value)) {
    if (!req.body?.emailIds || Array.isArray(req.body?.emailIds) && req.body?.emailIds.length < 1) {
      throw new Error('At least one email id is required to send the email');
    }
  }
}), // check('emailIds')
//     .optional()
//     .isArray().withMessage("Email ids are not valid"),
(0, _import.check)('emailIds.*').isEmail().withMessage("Email ids are not valid1")];
exports.sendEmailValidation = sendEmailValidation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92YWxpZGF0aW9uL0VtYWlsVmFsaWRhdGlvbnMuanMiXSwibmFtZXMiOlsidGVtcGxhdGVWYWxpZGF0aW9uIiwib3B0aW9uYWwiLCJub3RFbXB0eSIsIndpdGhNZXNzYWdlIiwiY3VzdG9tIiwidiIsInIiLCJFbWFpbFRlbXBsYXRlTW9kZWwiLCJmaW5kT25lIiwiX2lkIiwiRXJyb3IiLCJlIiwiaXNTdHJpbmciLCJpc1NsdWciLCJ2YWx1ZSIsInJlcSIsImJvZHkiLCJyZXN1bHQiLCJrZXkiLCJzZW5kRW1haWxWYWxpZGF0aW9uIiwic3ViamVjdCIsImh0bWwiLCJpc0luIiwiaW5jbHVkZXMiLCJlbWFpbElkcyIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImlzRW1haWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVPLE1BQU1BLGtCQUFrQixHQUFHLENBRTlCLG1CQUFNLEtBQU4sRUFDS0MsUUFETCxHQUVLQyxRQUZMLEdBRWdCQyxXQUZoQixDQUU0QiwrQkFGNUIsRUFHS0MsTUFITCxDQUdZLE1BQU9DLENBQVAsSUFBYTtBQUNqQixNQUFJO0FBQ0EsVUFBTUMsQ0FBQyxHQUFHLE1BQU1DLHVCQUFtQkMsT0FBbkIsQ0FBMkI7QUFBQ0MsTUFBQUEsR0FBRyxFQUFFSjtBQUFOLEtBQTNCLENBQWhCOztBQUNBLFFBQUksQ0FBQ0MsQ0FBTCxFQUFRO0FBQ0osWUFBTSxJQUFJSSxLQUFKLENBQVUsZ0JBQVYsQ0FBTjtBQUNIO0FBQ0osR0FMRCxDQUtFLE9BQU9DLENBQVAsRUFBVTtBQUNSLFVBQU0sSUFBSUQsS0FBSixDQUFVLGtEQUFWLENBQU47QUFDSDtBQUNKLENBWkwsQ0FGOEIsRUFnQjlCLG1CQUFNLFNBQU4sRUFDS1IsUUFETCxHQUNnQkMsV0FEaEIsQ0FDNEIsaUNBRDVCLEVBRUtTLFFBRkwsR0FFZ0JULFdBRmhCLENBRTRCLGtDQUY1QixDQWhCOEIsRUFvQjlCLG1CQUFNLEtBQU4sRUFDS0QsUUFETCxHQUNnQkMsV0FEaEIsQ0FDNEIsNkJBRDVCLEVBRUtVLE1BRkwsR0FFY1YsV0FGZCxDQUUwQiw4QkFGMUIsRUFHS0MsTUFITCxDQUdZLE9BQU9VLEtBQVAsRUFBYztBQUFFQyxFQUFBQTtBQUFGLENBQWQsS0FBMEI7QUFDOUIsUUFBTUMsSUFBSSxHQUFHRCxHQUFHLENBQUNDLElBQWpCO0FBQ0EsUUFBTUMsTUFBTSxHQUFHLE1BQU1WLHVCQUFtQkMsT0FBbkIsQ0FBMkI7QUFBRVUsSUFBQUEsR0FBRyxFQUFFSjtBQUFQLEdBQTNCLENBQXJCOztBQUNBLE1BQUlHLE1BQUosRUFBWTtBQUNSLFFBQUlELElBQUksQ0FBQ1AsR0FBVCxFQUFjO0FBQ1YsVUFBSVEsTUFBTSxDQUFDUixHQUFQLElBQWNPLElBQUksQ0FBQ1AsR0FBdkIsRUFBNEI7QUFDeEIsY0FBTSxJQUFJQyxLQUFKLENBQVUsd0NBQVYsQ0FBTjtBQUNIO0FBQ0osS0FKRCxNQUlPO0FBQ0gsWUFBTSxJQUFJQSxLQUFKLENBQVUsd0NBQVYsQ0FBTjtBQUNIO0FBQ0o7QUFDSixDQWZMLENBcEI4QixFQXFDOUIsbUJBQU0sTUFBTixFQUNLUixRQURMLEdBQ2dCQyxXQURoQixDQUM0Qix1Q0FENUIsRUFFS1MsUUFGTCxHQUVnQlQsV0FGaEIsQ0FFNEIsd0NBRjVCLENBckM4QixDQUEzQjs7QUEyQ0EsTUFBTWdCLG1CQUFtQixHQUFHLENBRS9CLG1CQUFNLFVBQU4sRUFDS2pCLFFBREwsR0FDZ0JDLFdBRGhCLENBQzRCLGtDQUQ1QixFQUVLQyxNQUZMLENBRVksT0FBT1UsS0FBUCxFQUFjO0FBQUVDLEVBQUFBO0FBQUYsQ0FBZCxLQUEwQjtBQUM5QixNQUFJRCxLQUFLLEtBQUssUUFBZCxFQUF3QjtBQUNwQixRQUFJLENBQUNDLEdBQUcsQ0FBQ0MsSUFBSixFQUFVSSxPQUFmLEVBQXdCO0FBQ3BCLFlBQU0sSUFBSVYsS0FBSixDQUFVLGlDQUFWLENBQU47QUFDSDs7QUFDRCxRQUFJLENBQUNLLEdBQUcsQ0FBQ0MsSUFBSixFQUFVSyxJQUFmLEVBQXFCO0FBQ2pCLFlBQU0sSUFBSVgsS0FBSixDQUFVLHlDQUFWLENBQU47QUFDSDtBQUNKO0FBQ0osQ0FYTCxDQUYrQixFQWUvQixtQkFBTSxJQUFOLEVBQ0tSLFFBREwsR0FDZ0JDLFdBRGhCLENBQzRCLGlDQUQ1QixFQUVLbUIsSUFGTCxDQUVVLENBQUMsZUFBRCxFQUFrQixhQUFsQixFQUFpQyxZQUFqQyxFQUErQyxjQUEvQyxFQUErRCxZQUEvRCxFQUE2RSxXQUE3RSxFQUEwRixRQUExRixDQUZWLEVBRStHbkIsV0FGL0csQ0FFMkgsbUNBRjNILEVBR0tDLE1BSEwsQ0FHWSxPQUFPVSxLQUFQLEVBQWM7QUFBRUMsRUFBQUE7QUFBRixDQUFkLEtBQTBCO0FBQzlCLE1BQUcsQ0FBQyxDQUFDLGNBQUQsRUFBaUIsWUFBakIsRUFBK0IsV0FBL0IsRUFBNENRLFFBQTVDLENBQXFEVCxLQUFyRCxDQUFKLEVBQWdFO0FBQzVELFFBQUcsQ0FBQ0MsR0FBRyxDQUFDQyxJQUFKLEVBQVVRLFFBQVgsSUFBd0JDLEtBQUssQ0FBQ0MsT0FBTixDQUFjWCxHQUFHLENBQUNDLElBQUosRUFBVVEsUUFBeEIsS0FBcUNULEdBQUcsQ0FBQ0MsSUFBSixFQUFVUSxRQUFWLENBQW1CRyxNQUFuQixHQUEwQixDQUExRixFQUE4RjtBQUMxRixZQUFNLElBQUlqQixLQUFKLENBQVUscURBQVYsQ0FBTjtBQUNIO0FBQ0o7QUFDSixDQVRMLENBZitCLEVBMEIvQjtBQUNBO0FBQ0E7QUFFQSxtQkFBTSxZQUFOLEVBQ0trQixPQURMLEdBQ2V6QixXQURmLENBQzJCLDBCQUQzQixDQTlCK0IsQ0FBNUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjaGVjayB9IGZyb20gJy4uL3NldHRpbmdzL2ltcG9ydCc7XHJcbmltcG9ydCBFbWFpbFRlbXBsYXRlTW9kZWwgZnJvbSAnLi4vZGF0YS1iYXNlL21vZGVscy9lbWFpbFRlbXBsYXRlJztcclxuXHJcbmV4cG9ydCBjb25zdCB0ZW1wbGF0ZVZhbGlkYXRpb24gPSBbXHJcblxyXG4gICAgY2hlY2soJ19pZCcpXHJcbiAgICAgICAgLm9wdGlvbmFsKClcclxuICAgICAgICAubm90RW1wdHkoKS53aXRoTWVzc2FnZShcIlByb3ZpZGUgLyBTZWxlY3QgYSB2YWxpZCBkYXRhXCIpXHJcbiAgICAgICAgLmN1c3RvbShhc3luYyAodikgPT4ge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IGF3YWl0IEVtYWlsVGVtcGxhdGVNb2RlbC5maW5kT25lKHtfaWQ6IHZ9KTtcclxuICAgICAgICAgICAgICAgIGlmICghcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRhdGEgbm90IGZvdW5kXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIGRhdGEgZG9lcyBub3QgZXhpdC4gUGxlYXNlIGNoZWNrIG9yIHJlZnJlc2hcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSxcclxuXHJcbiAgICBjaGVjaygnc3ViamVjdCcpXHJcbiAgICAgICAgLm5vdEVtcHR5KCkud2l0aE1lc3NhZ2UoXCJUaGUgJ1N1YmplY3QnIGZpZWxkIGlzIHJlcXVpcmVkXCIpXHJcbiAgICAgICAgLmlzU3RyaW5nKCkud2l0aE1lc3NhZ2UoXCJUaGUgJ1N1YmplY3QnIGZpZWxkIGlzIG5vdCB2YWxpZFwiKSxcclxuXHJcbiAgICBjaGVjaygna2V5JylcclxuICAgICAgICAubm90RW1wdHkoKS53aXRoTWVzc2FnZShcIlRoZSAna2V5JyBmaWVsZCBpcyByZXF1aXJlZFwiKVxyXG4gICAgICAgIC5pc1NsdWcoKS53aXRoTWVzc2FnZShcIlRoZSAna2V5JyBmaWVsZCBpcyBub3QgdmFsaWRcIilcclxuICAgICAgICAuY3VzdG9tKGFzeW5jICh2YWx1ZSwgeyByZXEgfSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBib2R5ID0gcmVxLmJvZHk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IEVtYWlsVGVtcGxhdGVNb2RlbC5maW5kT25lKHsga2V5OiB2YWx1ZSB9KTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJvZHkuX2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5faWQgIT0gYm9keS5faWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQSB0ZW1wbGF0ZSBhbHJlYWR5IGV4aXN0IHdpdGggdGhpcyBrZXlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIHRlbXBsYXRlIGFscmVhZHkgZXhpc3Qgd2l0aCB0aGlzIGtleVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLFxyXG5cclxuICAgIGNoZWNrKCdodG1sJylcclxuICAgICAgICAubm90RW1wdHkoKS53aXRoTWVzc2FnZShcIlRoZSAnVGVtcGxhdGUgQ29kZScgZmllbGQgaXMgcmVxdWlyZWRcIilcclxuICAgICAgICAuaXNTdHJpbmcoKS53aXRoTWVzc2FnZShcIlRoZSAnVGVtcGxhdGUgQ29kZScgZmllbGQgaXMgbm90IHZhbGlkXCIpLFxyXG5cclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBzZW5kRW1haWxWYWxpZGF0aW9uID0gW1xyXG5cclxuICAgIGNoZWNrKCd0ZW1wbGF0ZScpXHJcbiAgICAgICAgLm5vdEVtcHR5KCkud2l0aE1lc3NhZ2UoXCJUaGUgJ1RlbXBsYXRlJyBmaWVsZCBpcyByZXF1aXJlZFwiKVxyXG4gICAgICAgIC5jdXN0b20oYXN5bmMgKHZhbHVlLCB7IHJlcSB9KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJ2N1c3RvbScpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcmVxLmJvZHk/LnN1YmplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgJ1N1YmplY3QnIGZpZWxkIGlzIHJlcXVpcmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFyZXEuYm9keT8uaHRtbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSAnVGVtcGxhdGUgRGVzaWduJyBmaWVsZCBpcyByZXF1aXJlZFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLFxyXG5cclxuICAgIGNoZWNrKCd0bycpXHJcbiAgICAgICAgLm5vdEVtcHR5KCkud2l0aE1lc3NhZ2UoXCJUaGUgJ1NlbmQgVG8nIGZpZWxkIGlzIHJlcXVpcmVkXCIpXHJcbiAgICAgICAgLmlzSW4oWydtYW55Q3VzdG9tZXJzJywgJ21hbnlEcml2ZXJzJywgJ21hbnlBZG1pbnMnLCAnYWxsQ3VzdG9tZXJzJywgJ2FsbERyaXZlcnMnLCAnYWxsQWRtaW5zJywgJ2N1c3RvbSddKS53aXRoTWVzc2FnZShcIlRoZSAnU2VuZCBUbycgZmllbGQgaXMgbm90IHZhbGlkLlwiKVxyXG4gICAgICAgIC5jdXN0b20oYXN5bmMgKHZhbHVlLCB7IHJlcSB9KSA9PiB7XHJcbiAgICAgICAgICAgIGlmKCFbJ2FsbEN1c3RvbWVycycsICdhbGxEcml2ZXJzJywgJ2FsbEFkbWlucyddLmluY2x1ZGVzKHZhbHVlKSl7XHJcbiAgICAgICAgICAgICAgICBpZighcmVxLmJvZHk/LmVtYWlsSWRzIHx8IChBcnJheS5pc0FycmF5KHJlcS5ib2R5Py5lbWFpbElkcykgJiYgcmVxLmJvZHk/LmVtYWlsSWRzLmxlbmd0aDwxKSApe1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXQgbGVhc3Qgb25lIGVtYWlsIGlkIGlzIHJlcXVpcmVkIHRvIHNlbmQgdGhlIGVtYWlsJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSxcclxuXHJcbiAgICAvLyBjaGVjaygnZW1haWxJZHMnKVxyXG4gICAgLy8gICAgIC5vcHRpb25hbCgpXHJcbiAgICAvLyAgICAgLmlzQXJyYXkoKS53aXRoTWVzc2FnZShcIkVtYWlsIGlkcyBhcmUgbm90IHZhbGlkXCIpLFxyXG5cclxuICAgIGNoZWNrKCdlbWFpbElkcy4qJylcclxuICAgICAgICAuaXNFbWFpbCgpLndpdGhNZXNzYWdlKFwiRW1haWwgaWRzIGFyZSBub3QgdmFsaWQxXCIpLFxyXG5cclxuXTsiXX0=