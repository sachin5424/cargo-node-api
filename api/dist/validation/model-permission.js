"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addPermission = exports.addMultiPermission = void 0;

var _expressValidator = require("express-validator");

var _index = require("../data-base/index");

let addPermission = [(0, _expressValidator.check)('userId').notEmpty().withMessage('This field is required'), (0, _expressValidator.check)('permissionId').notEmpty().withMessage('This field is required').custom(async (value, {
  req
}) => {
  const data = await _index.UserAuthModelPermission.findOne({
    userId: req.body.userId,
    permissionId: value
  });

  if (data) {
    return Promise.reject('alread exists this  permission');
  }
})];
exports.addPermission = addPermission;
let addMultiPermission = [(0, _expressValidator.check)('permissionList.*.userId').notEmpty().withMessage('This field is required'), (0, _expressValidator.check)('permissionList.*.permissionId').notEmpty().withMessage('This field is required').custom(async (value, {
  req
}) => {
  var value = [];
  var check_permissionId = [];
  var permissionList = req.body.permissionList;

  for (var i = 0; i < permissionList.length; i++) {
    const data = await _index.UserAuthModelPermission.findOne({
      userId: permissionList[i].userId,
      permissionId: permissionList[i].permissionId
    });

    if (data) {
      return Promise.reject('alread exists this  permission');
    }
  }
})];
exports.addMultiPermission = addMultiPermission;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92YWxpZGF0aW9uL21vZGVsLXBlcm1pc3Npb24uanMiXSwibmFtZXMiOlsiYWRkUGVybWlzc2lvbiIsIm5vdEVtcHR5Iiwid2l0aE1lc3NhZ2UiLCJjdXN0b20iLCJ2YWx1ZSIsInJlcSIsImRhdGEiLCJVc2VyQXV0aE1vZGVsUGVybWlzc2lvbiIsImZpbmRPbmUiLCJ1c2VySWQiLCJib2R5IiwicGVybWlzc2lvbklkIiwiUHJvbWlzZSIsInJlamVjdCIsImFkZE11bHRpUGVybWlzc2lvbiIsImNoZWNrX3Blcm1pc3Npb25JZCIsInBlcm1pc3Npb25MaXN0IiwiaSIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBLElBQUlBLGFBQWEsR0FBRyxDQUNoQiw2QkFBTSxRQUFOLEVBQWdCQyxRQUFoQixHQUEyQkMsV0FBM0IsQ0FBdUMsd0JBQXZDLENBRGdCLEVBRWhCLDZCQUFNLGNBQU4sRUFBc0JELFFBQXRCLEdBQWlDQyxXQUFqQyxDQUE2Qyx3QkFBN0MsRUFBdUVDLE1BQXZFLENBQThFLE9BQU9DLEtBQVAsRUFBYztBQUFFQyxFQUFBQTtBQUFGLENBQWQsS0FBMEI7QUFDcEcsUUFBTUMsSUFBSSxHQUFHLE1BQU1DLCtCQUF3QkMsT0FBeEIsQ0FBZ0M7QUFBRUMsSUFBQUEsTUFBTSxFQUFFSixHQUFHLENBQUNLLElBQUosQ0FBU0QsTUFBbkI7QUFBMkJFLElBQUFBLFlBQVksRUFBRVA7QUFBekMsR0FBaEMsQ0FBbkI7O0FBQ0EsTUFBSUUsSUFBSixFQUFVO0FBQ04sV0FBT00sT0FBTyxDQUFDQyxNQUFSLENBQWUsZ0NBQWYsQ0FBUDtBQUNIO0FBQ0osQ0FMRCxDQUZnQixDQUFwQjs7QUFTQSxJQUFJQyxrQkFBa0IsR0FBRyxDQUNyQiw2QkFBTSx5QkFBTixFQUFpQ2IsUUFBakMsR0FBNENDLFdBQTVDLENBQXdELHdCQUF4RCxDQURxQixFQUVyQiw2QkFBTSwrQkFBTixFQUF1Q0QsUUFBdkMsR0FBa0RDLFdBQWxELENBQThELHdCQUE5RCxFQUF3RkMsTUFBeEYsQ0FBK0YsT0FBT0MsS0FBUCxFQUFjO0FBQUVDLEVBQUFBO0FBQUYsQ0FBZCxLQUEwQjtBQUNySCxNQUFJRCxLQUFLLEdBQUcsRUFBWjtBQUNBLE1BQUlXLGtCQUFrQixHQUFHLEVBQXpCO0FBQ0EsTUFBSUMsY0FBYyxHQUFHWCxHQUFHLENBQUNLLElBQUosQ0FBU00sY0FBOUI7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRCxjQUFjLENBQUNFLE1BQW5DLEVBQTJDRCxDQUFDLEVBQTVDLEVBQWdEO0FBQzVDLFVBQU1YLElBQUksR0FBRyxNQUFNQywrQkFBd0JDLE9BQXhCLENBQWdDO0FBQUVDLE1BQUFBLE1BQU0sRUFBRU8sY0FBYyxDQUFDQyxDQUFELENBQWQsQ0FBa0JSLE1BQTVCO0FBQW9DRSxNQUFBQSxZQUFZLEVBQUVLLGNBQWMsQ0FBQ0MsQ0FBRCxDQUFkLENBQWtCTjtBQUFwRSxLQUFoQyxDQUFuQjs7QUFDQSxRQUFJTCxJQUFKLEVBQVU7QUFDTixhQUFPTSxPQUFPLENBQUNDLE1BQVIsQ0FBZSxnQ0FBZixDQUFQO0FBQ0g7QUFDSjtBQUNKLENBVkQsQ0FGcUIsQ0FBekIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ2V4cHJlc3MtdmFsaWRhdG9yJztcclxuaW1wb3J0IHsgVXNlckF1dGhNb2RlbFBlcm1pc3Npb24gfSBmcm9tICcuLi9kYXRhLWJhc2UvaW5kZXgnO1xyXG5sZXQgYWRkUGVybWlzc2lvbiA9IFtcclxuICAgIGNoZWNrKCd1c2VySWQnKS5ub3RFbXB0eSgpLndpdGhNZXNzYWdlKCdUaGlzIGZpZWxkIGlzIHJlcXVpcmVkJyksXHJcbiAgICBjaGVjaygncGVybWlzc2lvbklkJykubm90RW1wdHkoKS53aXRoTWVzc2FnZSgnVGhpcyBmaWVsZCBpcyByZXF1aXJlZCcpLmN1c3RvbShhc3luYyAodmFsdWUsIHsgcmVxIH0pID0+IHtcclxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgVXNlckF1dGhNb2RlbFBlcm1pc3Npb24uZmluZE9uZSh7IHVzZXJJZDogcmVxLmJvZHkudXNlcklkLCBwZXJtaXNzaW9uSWQ6IHZhbHVlIH0pO1xyXG4gICAgICAgIGlmIChkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnYWxyZWFkIGV4aXN0cyB0aGlzICBwZXJtaXNzaW9uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuXTtcclxubGV0IGFkZE11bHRpUGVybWlzc2lvbiA9IFtcclxuICAgIGNoZWNrKCdwZXJtaXNzaW9uTGlzdC4qLnVzZXJJZCcpLm5vdEVtcHR5KCkud2l0aE1lc3NhZ2UoJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQnKSxcclxuICAgIGNoZWNrKCdwZXJtaXNzaW9uTGlzdC4qLnBlcm1pc3Npb25JZCcpLm5vdEVtcHR5KCkud2l0aE1lc3NhZ2UoJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQnKS5jdXN0b20oYXN5bmMgKHZhbHVlLCB7IHJlcSB9KSA9PiB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gW107XHJcbiAgICAgICAgdmFyIGNoZWNrX3Blcm1pc3Npb25JZCA9IFtdO1xyXG4gICAgICAgIHZhciBwZXJtaXNzaW9uTGlzdCA9IHJlcS5ib2R5LnBlcm1pc3Npb25MaXN0O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGVybWlzc2lvbkxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IFVzZXJBdXRoTW9kZWxQZXJtaXNzaW9uLmZpbmRPbmUoeyB1c2VySWQ6IHBlcm1pc3Npb25MaXN0W2ldLnVzZXJJZCwgcGVybWlzc2lvbklkOiBwZXJtaXNzaW9uTGlzdFtpXS5wZXJtaXNzaW9uSWQgfSk7XHJcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ2FscmVhZCBleGlzdHMgdGhpcyAgcGVybWlzc2lvbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuXTtcclxuZXhwb3J0IHsgYWRkUGVybWlzc2lvbiwgYWRkTXVsdGlQZXJtaXNzaW9uIH07XHJcbiJdfQ==