"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.listPaginate = exports.createToken = exports.createData = exports.aggregateFilter = exports.FindOne = void 0;

let createData = async (model, data) => {
  return new Promise((resolve, reject) => {
    model.create(data, (err, res) => {
      if (err) {
        reject(err);
      } else {
        resolve(res);
      }
    });
  });
};

exports.createData = createData;

let createToken = async (model, data) => {
  return new Promise((resolve, reject) => {
    model.create(data, (err, res) => {
      if (err) {
        reject(err);
      } else {
        resolve(res);
      }
    });
  });
}; // let listFind = async (model:any,data:UserInterface[]) =>{
// }


exports.createToken = createToken;

let FindOne = async (model, value) => {
  return new Promise(async (resolve, reject) => {
    try {
      const data = await model.findOne({
        value
      }).catch(err => {
        reject(err);
      });
      resolve(data);
    } catch (error) {
      reject(error);
    }
  });
};

exports.FindOne = FindOne;

let listPaginate = async (model, query, options) => {
  return new Promise((resolve, reject) => {
    model.paginate(query, options, (err, res) => {
      if (err) {
        reject(err);
      }

      resolve(res);
    });
  });
};

exports.listPaginate = listPaginate;

let aggregateFilter = async (model, filter) => {
  return new Promise((resolve, reject) => {
    model.aggregate(filter).exec(function (err, invites) {
      if (err) {
        reject(err);
      }

      resolve(invites);
    });
  });
};

exports.aggregateFilter = aggregateFilter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2aWNlcy90ZXN0LmpzIl0sIm5hbWVzIjpbImNyZWF0ZURhdGEiLCJtb2RlbCIsImRhdGEiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNyZWF0ZSIsImVyciIsInJlcyIsImNyZWF0ZVRva2VuIiwiRmluZE9uZSIsInZhbHVlIiwiZmluZE9uZSIsImNhdGNoIiwiZXJyb3IiLCJsaXN0UGFnaW5hdGUiLCJxdWVyeSIsIm9wdGlvbnMiLCJwYWdpbmF0ZSIsImFnZ3JlZ2F0ZUZpbHRlciIsImZpbHRlciIsImFnZ3JlZ2F0ZSIsImV4ZWMiLCJpbnZpdGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBSUEsVUFBVSxHQUFHLE9BQU9DLEtBQVAsRUFBY0MsSUFBZCxLQUF1QjtBQUNwQyxTQUFPLElBQUlDLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDcENKLElBQUFBLEtBQUssQ0FBQ0ssTUFBTixDQUFhSixJQUFiLEVBQW1CLENBQUNLLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQzdCLFVBQUlELEdBQUosRUFBUztBQUNMRixRQUFBQSxNQUFNLENBQUNFLEdBQUQsQ0FBTjtBQUNILE9BRkQsTUFHSztBQUNESCxRQUFBQSxPQUFPLENBQUNJLEdBQUQsQ0FBUDtBQUNIO0FBQ0osS0FQRDtBQVFILEdBVE0sQ0FBUDtBQVVILENBWEQ7Ozs7QUFZQSxJQUFJQyxXQUFXLEdBQUcsT0FBT1IsS0FBUCxFQUFjQyxJQUFkLEtBQXVCO0FBQ3JDLFNBQU8sSUFBSUMsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUNwQ0osSUFBQUEsS0FBSyxDQUFDSyxNQUFOLENBQWFKLElBQWIsRUFBbUIsQ0FBQ0ssR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDN0IsVUFBSUQsR0FBSixFQUFTO0FBQ0xGLFFBQUFBLE1BQU0sQ0FBQ0UsR0FBRCxDQUFOO0FBQ0gsT0FGRCxNQUdLO0FBQ0RILFFBQUFBLE9BQU8sQ0FBQ0ksR0FBRCxDQUFQO0FBQ0g7QUFDSixLQVBEO0FBUUgsR0FUTSxDQUFQO0FBVUgsQ0FYRCxDLENBWUE7QUFDQTs7Ozs7QUFDQSxJQUFJRSxPQUFPLEdBQUcsT0FBT1QsS0FBUCxFQUFjVSxLQUFkLEtBQXdCO0FBQ2xDLFNBQU8sSUFBSVIsT0FBSixDQUFZLE9BQU9DLE9BQVAsRUFBZ0JDLE1BQWhCLEtBQTJCO0FBQzFDLFFBQUk7QUFDQSxZQUFNSCxJQUFJLEdBQUcsTUFBTUQsS0FBSyxDQUFDVyxPQUFOLENBQWM7QUFBRUQsUUFBQUE7QUFBRixPQUFkLEVBQXlCRSxLQUF6QixDQUFnQ04sR0FBRCxJQUFTO0FBQ3ZERixRQUFBQSxNQUFNLENBQUNFLEdBQUQsQ0FBTjtBQUNILE9BRmtCLENBQW5CO0FBR0FILE1BQUFBLE9BQU8sQ0FBQ0YsSUFBRCxDQUFQO0FBQ0gsS0FMRCxDQU1BLE9BQU9ZLEtBQVAsRUFBYztBQUNWVCxNQUFBQSxNQUFNLENBQUNTLEtBQUQsQ0FBTjtBQUNIO0FBQ0osR0FWTSxDQUFQO0FBV0gsQ0FaRDs7OztBQWFBLElBQUlDLFlBQVksR0FBRyxPQUFPZCxLQUFQLEVBQWNlLEtBQWQsRUFBcUJDLE9BQXJCLEtBQWlDO0FBQ2hELFNBQU8sSUFBSWQsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUNwQ0osSUFBQUEsS0FBSyxDQUFDaUIsUUFBTixDQUFlRixLQUFmLEVBQXNCQyxPQUF0QixFQUErQixDQUFDVixHQUFELEVBQU1DLEdBQU4sS0FBYztBQUN6QyxVQUFJRCxHQUFKLEVBQVM7QUFDTEYsUUFBQUEsTUFBTSxDQUFDRSxHQUFELENBQU47QUFDSDs7QUFDREgsTUFBQUEsT0FBTyxDQUFDSSxHQUFELENBQVA7QUFDSCxLQUxEO0FBTUgsR0FQTSxDQUFQO0FBUUgsQ0FURDs7OztBQVVBLElBQUlXLGVBQWUsR0FBRyxPQUFPbEIsS0FBUCxFQUFjbUIsTUFBZCxLQUF5QjtBQUMzQyxTQUFPLElBQUlqQixPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3BDSixJQUFBQSxLQUFLLENBQUNvQixTQUFOLENBQWdCRCxNQUFoQixFQUF3QkUsSUFBeEIsQ0FBNkIsVUFBVWYsR0FBVixFQUFlZ0IsT0FBZixFQUF3QjtBQUNqRCxVQUFJaEIsR0FBSixFQUFTO0FBQ0xGLFFBQUFBLE1BQU0sQ0FBQ0UsR0FBRCxDQUFOO0FBQ0g7O0FBQ0RILE1BQUFBLE9BQU8sQ0FBQ21CLE9BQUQsQ0FBUDtBQUNILEtBTEQ7QUFNSCxHQVBNLENBQVA7QUFRSCxDQVREIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGNyZWF0ZURhdGEgPSBhc3luYyAobW9kZWwsIGRhdGEpID0+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgbW9kZWwuY3JlYXRlKGRhdGEsIChlcnIsIHJlcykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn07XHJcbmxldCBjcmVhdGVUb2tlbiA9IGFzeW5jIChtb2RlbCwgZGF0YSkgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBtb2RlbC5jcmVhdGUoZGF0YSwgKGVyciwgcmVzKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufTtcclxuLy8gbGV0IGxpc3RGaW5kID0gYXN5bmMgKG1vZGVsOmFueSxkYXRhOlVzZXJJbnRlcmZhY2VbXSkgPT57XHJcbi8vIH1cclxubGV0IEZpbmRPbmUgPSBhc3luYyAobW9kZWwsIHZhbHVlKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBtb2RlbC5maW5kT25lKHsgdmFsdWUgfSkuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTtcclxubGV0IGxpc3RQYWdpbmF0ZSA9IGFzeW5jIChtb2RlbCwgcXVlcnksIG9wdGlvbnMpID0+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgbW9kZWwucGFnaW5hdGUocXVlcnksIG9wdGlvbnMsIChlcnIsIHJlcykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXNvbHZlKHJlcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufTtcclxubGV0IGFnZ3JlZ2F0ZUZpbHRlciA9IGFzeW5jIChtb2RlbCwgZmlsdGVyKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIG1vZGVsLmFnZ3JlZ2F0ZShmaWx0ZXIpLmV4ZWMoZnVuY3Rpb24gKGVyciwgaW52aXRlcykge1xyXG4gICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXNvbHZlKGludml0ZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn07XHJcbmV4cG9ydCB7IGNyZWF0ZURhdGEsIGNyZWF0ZVRva2VuLCBGaW5kT25lLCBsaXN0UGFnaW5hdGUsIGFnZ3JlZ2F0ZUZpbHRlciB9O1xyXG4iXX0=