"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mongoose = _interopRequireDefault(require("mongoose"));

var _helper = require("../utls/_helper");

var _state = _interopRequireDefault(require("../data-base/models/state"));

var _district = _interopRequireDefault(require("../data-base/models/district"));

var _taluk = _interopRequireDefault(require("../data-base/models/taluk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Service {
  static async sdtList(query) {
    const response = {
      statusCode: 400,
      message: 'Data not found!',
      result: {
        data: []
      },
      status: false
    };

    try {
      const searchState = global.state ? {
        _id: global.state,
        isActive: true,
        isDeleted: false
      } : {
        isActive: true,
        isDeleted: false
      };
      const searchDistrict = global.district ? {
        _id: global.district,
        isActive: true,
        isDeleted: false
      } : {
        isActive: true,
        isDeleted: false
      };
      const searchTaluk = global.taluk ? {
        _id: global.taluk,
        isActive: true,
        isDeleted: false
      } : {
        isActive: true,
        isDeleted: false
      };
      (0, _helper.clearSearch)(searchState);
      (0, _helper.clearSearch)(searchDistrict);
      (0, _helper.clearSearch)(searchTaluk);
      const aggregate = [{
        $match: searchState
      }, {
        $lookup: {
          from: 'districts',
          localField: '_id',
          foreignField: 'state',
          as: 'districts',
          pipeline: [{
            $match: searchDistrict
          }, {
            $lookup: {
              from: 'taluks',
              localField: '_id',
              foreignField: 'district',
              as: 'taluks',
              pipeline: [{
                $match: searchTaluk
              }, {
                $project: {
                  "name": 1
                }
              }]
            }
          }, {
            $project: {
              "name": 1,
              "taluks": 1
            }
          }]
        }
      }, {
        $project: {
          "name": 1,
          "districts": 1
        }
      }];
      response.result.data = await _state.default.aggregate(aggregate);

      if (response.result.data.length) {
        response.message = "Data fetched";
      }

      response.statusCode = 200;
      response.status = true;
      return response;
    } catch (e) {
      throw new Error(e);
    }
  }

  static async listState(query, params) {
    const isAll = params.isAll === 'ALL';
    const response = {
      statusCode: 400,
      message: 'Data not found!',
      result: {
        data: [],
        page: query.page * 1 > 0 ? query.page * 1 : 1,
        limit: query.limit * 1 > 0 ? query.limit * 1 : 20,
        total: 0
      },
      status: false
    };

    try {
      const search = _objectSpread({
        _id: query._id,
        isDeleted: false,
        $or: [{
          name: {
            $regex: '.*' + (query?.key || '') + '.*'
          }
        }]
      }, (0, _helper.getAdminFilter)('_id'));

      (0, _helper.clearSearch)(search);
      const $aggregate = [{
        $match: search
      }, {
        $sort: {
          _id: -1
        }
      }, {
        "$project": {
          name: 1,
          isActive: 1
        }
      }];
      const counter = await _state.default.aggregate([...$aggregate, {
        $count: "total"
      }]);
      response.result.total = counter[0]?.total;

      if (isAll) {
        response.result.page = 1;
        response.result.limit = response.result.total;
      }

      response.result.data = await _state.default.aggregate([...$aggregate, {
        $limit: response.result.limit + response.result.limit * (response.result.page - 1)
      }, {
        $skip: response.result.limit * (response.result.page - 1)
      }]);

      if (response.result.data.length) {
        response.message = "Data fetched";
      }

      response.statusCode = 200;
      response.status = true;
      return response;
    } catch (e) {
      throw new Error(e);
    }
  }

  static async saveState(data) {
    const _id = data._id;
    const response = {
      statusCode: 400,
      message: 'Error!',
      status: false
    };

    try {
      const tplData = _id ? await _state.default.findById(_id) : new _state.default();
      tplData.name = data.name;
      tplData.isActive = data.isActive;
      await tplData.save();
      response.message = _id ? "State is updated" : "A new state is created";
      response.statusCode = 200;
      response.status = true;
      return response;
    } catch (e) {
      throw new Error(e);
    }
  }

  static async deleteState(_id, cond) {
    (0, _helper.clearSearch)({
      cond
    });
    const response = {
      statusCode: 400,
      message: 'Error!',
      status: false
    };

    try {
      await _state.default.updateOne(_objectSpread({
        _id
      }, cond), {
        isDeleted: true
      });
      response.message = "Deleted successfully";
      response.statusCode = 200;
      response.status = true;
      return response;
    } catch (e) {
      throw new Error("Can not delete. Something went wrong.");
    }
  }

  static async listDistrict(query, params) {
    const isAll = params.isAll === 'ALL';
    const response = {
      statusCode: 400,
      message: 'Data not found!',
      result: {
        data: [],
        page: query.page * 1 > 0 ? query.page * 1 : 1,
        limit: query.limit * 1 > 0 ? query.limit * 1 : 20,
        total: 0
      },
      status: false
    };

    try {
      const search = _objectSpread({
        _id: query._id,
        isDeleted: false,
        $or: [{
          name: {
            $regex: '.*' + (query?.key || '') + '.*'
          }
        }],
        state: query.state ? _mongoose.default.Types.ObjectId(query.state) : ''
      }, (0, _helper.getAdminFilter)('state', '_id'));

      (0, _helper.clearSearch)(search);
      const $aggregate = [{
        $match: search
      }, {
        $sort: {
          _id: -1
        }
      }, // {
      //     $lookup: {
      //         from: 'states',
      //         localField: 'state',
      //         foreignField: '_id',
      //         as: 'stateDetails',
      //         pipeline: [
      //             {
      //                 $match: {isDeleted: false}
      //             }
      //         ]
      //     }
      // },
      // { $unwind: { path: "$stateDetails", preserveNullAndEmptyArrays: false} },
      {
        "$project": {
          name: 1,
          state: 1,
          isActive: 1
        }
      }];
      const counter = await _district.default.aggregate([...$aggregate, {
        $count: "total"
      }]);
      response.result.total = counter[0]?.total;

      if (isAll) {
        response.result.page = 1;
        response.result.limit = response.result.total;
      }

      response.result.data = await _district.default.aggregate([...$aggregate, {
        $limit: response.result.limit + response.result.limit * (response.result.page - 1)
      }, {
        $skip: response.result.limit * (response.result.page - 1)
      }]);

      if (response.result.data.length) {
        response.message = "Data fetched";
      }

      response.statusCode = 200;
      response.status = true;
      return response;
    } catch (e) {
      throw new Error(e);
    }
  }

  static async saveDistrict(data) {
    const _id = data._id;
    const response = {
      statusCode: 400,
      message: 'Error!',
      status: false
    };

    try {
      const tplData = _id ? await _district.default.findById(_id) : new _district.default();
      tplData.name = data.name;
      tplData.isActive = data.isActive;
      tplData.state = data.state;
      await tplData.save();
      response.message = _id ? "District is updated" : "A new district is created";
      response.statusCode = 200;
      response.status = true;
      return response;
    } catch (e) {
      throw new Error(e);
    }
  }

  static async deleteDistrict(_id, cond) {
    (0, _helper.clearSearch)({
      cond
    });
    const response = {
      statusCode: 400,
      message: 'Error!',
      status: false
    };

    try {
      await _district.default.updateOne(_objectSpread({
        _id
      }, cond), {
        isDeleted: true
      });
      response.message = "Deleted successfully";
      response.statusCode = 200;
      response.status = true;
      return response;
    } catch (e) {
      throw new Error("Can not delete. Something went wrong.");
    }
  }

  static async listTaluk(query, params) {
    const isAll = params.isAll === 'ALL';
    const response = {
      statusCode: 400,
      message: 'Data not found!',
      result: {
        data: [],
        page: query.page * 1 > 0 ? query.page * 1 : 1,
        limit: query.limit * 1 > 0 ? query.limit * 1 : 20,
        total: 0
      },
      status: false
    };

    try {
      const search = _objectSpread({
        _id: query._id,
        isDeleted: false,
        $or: [{
          name: {
            $regex: '.*' + (query?.key || '') + '.*'
          }
        }],
        district: query.district ? _mongoose.default.Types.ObjectId(query.district) : ''
      }, (0, _helper.getAdminFilter)('state', 'district', '_id'));

      (0, _helper.clearSearch)(search);
      const $aggregate = [{
        $match: search
      }, {
        $sort: {
          _id: -1
        }
      }, {
        "$project": {
          name: 1,
          state: 1,
          district: 1,
          isActive: 1
        }
      }];
      const counter = await _taluk.default.aggregate([...$aggregate, {
        $count: "total"
      }]);
      response.result.total = counter[0]?.total;

      if (isAll) {
        response.result.page = 1;
        response.result.limit = response.result.total;
      }

      response.result.data = await _taluk.default.aggregate([...$aggregate, {
        $limit: response.result.limit + response.result.limit * (response.result.page - 1)
      }, {
        $skip: response.result.limit * (response.result.page - 1)
      }]);

      if (response.result.data.length) {
        response.message = "Data fetched";
      }

      response.statusCode = 200;
      response.status = true;
      return response;
    } catch (e) {
      throw new Error(e);
    }
  }

  static async saveTaluk(data) {
    const _id = data._id;
    const response = {
      statusCode: 400,
      message: 'Error!',
      status: false
    };

    try {
      const tplData = _id ? await _taluk.default.findById(_id) : new _taluk.default();
      tplData.name = data.name;
      tplData.state = data.state;
      tplData.district = data.district;
      tplData.isActive = data.isActive;
      await tplData.save();
      response.message = _id ? "Taluk is updated" : "A new Taluk is created";
      response.statusCode = 200;
      response.status = true;
      return response;
    } catch (e) {
      throw new Error(e);
    }
  }

  static async deleteTaluk(_id, cond) {
    (0, _helper.clearSearch)({
      cond
    });
    const response = {
      statusCode: 400,
      message: 'Error!',
      status: false
    };

    try {
      await _taluk.default.updateOne(_objectSpread({
        _id
      }, cond), {
        isDeleted: true
      });
      response.message = "Deleted successfully";
      response.statusCode = 200;
      response.status = true;
      return response;
    } catch (e) {
      throw new Error("Can not delete. Something went wrong.");
    }
  }

}

exports.default = Service;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2aWNlcy9TRFRTZXJ2aWNlLmpzIl0sIm5hbWVzIjpbIlNlcnZpY2UiLCJzZHRMaXN0IiwicXVlcnkiLCJyZXNwb25zZSIsInN0YXR1c0NvZGUiLCJtZXNzYWdlIiwicmVzdWx0IiwiZGF0YSIsInN0YXR1cyIsInNlYXJjaFN0YXRlIiwiZ2xvYmFsIiwic3RhdGUiLCJfaWQiLCJpc0FjdGl2ZSIsImlzRGVsZXRlZCIsInNlYXJjaERpc3RyaWN0IiwiZGlzdHJpY3QiLCJzZWFyY2hUYWx1ayIsInRhbHVrIiwiYWdncmVnYXRlIiwiJG1hdGNoIiwiJGxvb2t1cCIsImZyb20iLCJsb2NhbEZpZWxkIiwiZm9yZWlnbkZpZWxkIiwiYXMiLCJwaXBlbGluZSIsIiRwcm9qZWN0IiwiU3RhdGVNb2RlbCIsImxlbmd0aCIsImUiLCJFcnJvciIsImxpc3RTdGF0ZSIsInBhcmFtcyIsImlzQWxsIiwicGFnZSIsImxpbWl0IiwidG90YWwiLCJzZWFyY2giLCIkb3IiLCJuYW1lIiwiJHJlZ2V4Iiwia2V5IiwiJGFnZ3JlZ2F0ZSIsIiRzb3J0IiwiY291bnRlciIsIiRjb3VudCIsIiRsaW1pdCIsIiRza2lwIiwic2F2ZVN0YXRlIiwidHBsRGF0YSIsImZpbmRCeUlkIiwic2F2ZSIsImRlbGV0ZVN0YXRlIiwiY29uZCIsInVwZGF0ZU9uZSIsImxpc3REaXN0cmljdCIsIm1vbmdvb3NlIiwiVHlwZXMiLCJPYmplY3RJZCIsIkRpc3RyaWN0TW9kZWwiLCJzYXZlRGlzdHJpY3QiLCJkZWxldGVEaXN0cmljdCIsImxpc3RUYWx1ayIsIlRhbHVrTW9kZWwiLCJzYXZlVGFsdWsiLCJkZWxldGVUYWx1ayJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7O0FBSWUsTUFBTUEsT0FBTixDQUFjO0FBRUwsZUFBUEMsT0FBTyxDQUFDQyxLQUFELEVBQVE7QUFDeEIsVUFBTUMsUUFBUSxHQUFHO0FBQ2JDLE1BQUFB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NkJBQVk7QUFBRUEsTUFBQUE7QUFBRixLQUFaO0FBQ0EsVUFBTW5ELFFBQVEsR0FBRztBQUFFQyxNQUFBQSxVQUFVLEVBQUUsR0FBZDtBQUFtQkMsTUFBQUEsT0FBTyxFQUFFLFFBQTVCO0FBQXNDRyxNQUFBQSxNQUFNLEVBQUU7QUFBOUMsS0FBakI7O0FBRUEsUUFBSTtBQUNBLFlBQU13RCxlQUFXVCxTQUFYO0FBQXVCM0MsUUFBQUE7QUFBdkIsU0FBK0IwQyxJQUEvQixHQUF1QztBQUFFeEMsUUFBQUEsU0FBUyxFQUFFO0FBQWIsT0FBdkMsQ0FBTjtBQUVBWCxNQUFBQSxRQUFRLENBQUNFLE9BQVQsR0FBbUIsc0JBQW5CO0FBQ0FGLE1BQUFBLFFBQVEsQ0FBQ0MsVUFBVCxHQUFzQixHQUF0QjtBQUNBRCxNQUFBQSxRQUFRLENBQUNLLE1BQVQsR0FBa0IsSUFBbEI7QUFDQSxhQUFPTCxRQUFQO0FBRUgsS0FSRCxDQVFFLE9BQU8yQixDQUFQLEVBQVU7QUFDUixZQUFNLElBQUlDLEtBQUosQ0FBVSx1Q0FBVixDQUFOO0FBQ0g7QUFDSjs7QUFyYXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbmdvb3NlIGZyb20gXCJtb25nb29zZVwiO1xyXG5pbXBvcnQgeyBjbGVhclNlYXJjaCwgZ2V0QWRtaW5GaWx0ZXIgfSBmcm9tIFwiLi4vdXRscy9faGVscGVyXCI7XHJcbmltcG9ydCBTdGF0ZU1vZGVsIGZyb20gXCIuLi9kYXRhLWJhc2UvbW9kZWxzL3N0YXRlXCI7XHJcbmltcG9ydCBEaXN0cmljdE1vZGVsIGZyb20gXCIuLi9kYXRhLWJhc2UvbW9kZWxzL2Rpc3RyaWN0XCI7XHJcbmltcG9ydCBUYWx1a01vZGVsIGZyb20gXCIuLi9kYXRhLWJhc2UvbW9kZWxzL3RhbHVrXCI7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlcnZpY2Uge1xyXG5cclxuICAgIHN0YXRpYyBhc3luYyBzZHRMaXN0KHF1ZXJ5KSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XHJcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcclxuICAgICAgICAgICAgbWVzc2FnZTogJ0RhdGEgbm90IGZvdW5kIScsXHJcbiAgICAgICAgICAgIHJlc3VsdDoge1xyXG4gICAgICAgICAgICAgICAgZGF0YTogW10sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXR1czogZmFsc2VcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBzZWFyY2hTdGF0ZSA9IGdsb2JhbC5zdGF0ZSA/IHtfaWQ6IGdsb2JhbC5zdGF0ZSwgaXNBY3RpdmU6IHRydWUsIGlzRGVsZXRlZDogZmFsc2V9IDogeyBpc0FjdGl2ZTogdHJ1ZSwgaXNEZWxldGVkOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICBjb25zdCBzZWFyY2hEaXN0cmljdCA9IGdsb2JhbC5kaXN0cmljdCA/IHtfaWQ6IGdsb2JhbC5kaXN0cmljdCwgaXNBY3RpdmU6IHRydWUsIGlzRGVsZXRlZDogZmFsc2V9IDogeyBpc0FjdGl2ZTogdHJ1ZSwgaXNEZWxldGVkOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICBjb25zdCBzZWFyY2hUYWx1ayA9IGdsb2JhbC50YWx1ayA/IHtfaWQ6IGdsb2JhbC50YWx1aywgaXNBY3RpdmU6IHRydWUsIGlzRGVsZXRlZDogZmFsc2V9IDogeyBpc0FjdGl2ZTogdHJ1ZSwgaXNEZWxldGVkOiBmYWxzZX07XHJcbiAgICAgICAgICAgIGNsZWFyU2VhcmNoKHNlYXJjaFN0YXRlKTtcclxuICAgICAgICAgICAgY2xlYXJTZWFyY2goc2VhcmNoRGlzdHJpY3QpO1xyXG4gICAgICAgICAgICBjbGVhclNlYXJjaChzZWFyY2hUYWx1ayk7XHJcblxyXG5cclxuICAgICAgICAgICAgY29uc3QgYWdncmVnYXRlID0gW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICRtYXRjaDogc2VhcmNoU3RhdGVcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGxvb2t1cDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAnZGlzdHJpY3RzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxGaWVsZDogJ19pZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVpZ25GaWVsZDogJ3N0YXRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXM6ICdkaXN0cmljdHMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaXBlbGluZTogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtYXRjaDogc2VhcmNoRGlzdHJpY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxvb2t1cDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAndGFsdWtzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxGaWVsZDogJ19pZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVpZ25GaWVsZDogJ2Rpc3RyaWN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXM6ICd0YWx1a3MnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaXBlbGluZTogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtYXRjaDogc2VhcmNoVGFsdWtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHByb2plY3Q6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHByb2plY3Q6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGFsdWtzXCI6IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHByb2plY3Q6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzdHJpY3RzXCI6IDFcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICBdO1xyXG5cclxuICAgICAgICAgICAgcmVzcG9uc2UucmVzdWx0LmRhdGEgPSBhd2FpdCBTdGF0ZU1vZGVsLmFnZ3JlZ2F0ZShhZ2dyZWdhdGUpXHJcblxyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2UucmVzdWx0LmRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZS5tZXNzYWdlID0gXCJEYXRhIGZldGNoZWRcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXNwb25zZS5zdGF0dXNDb2RlID0gMjAwO1xyXG4gICAgICAgICAgICByZXNwb25zZS5zdGF0dXMgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG5cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgbGlzdFN0YXRlKHF1ZXJ5LCBwYXJhbXMpIHtcclxuICAgICAgICBjb25zdCBpc0FsbCA9IHBhcmFtcy5pc0FsbCA9PT0gJ0FMTCc7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XHJcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcclxuICAgICAgICAgICAgbWVzc2FnZTogJ0RhdGEgbm90IGZvdW5kIScsXHJcbiAgICAgICAgICAgIHJlc3VsdDoge1xyXG4gICAgICAgICAgICAgICAgZGF0YTogW10sXHJcbiAgICAgICAgICAgICAgICBwYWdlOiBxdWVyeS5wYWdlICogMSA+IDAgPyBxdWVyeS5wYWdlICogMSA6IDEsXHJcbiAgICAgICAgICAgICAgICBsaW1pdDogcXVlcnkubGltaXQgKiAxID4gMCA/IHF1ZXJ5LmxpbWl0ICogMSA6IDIwLFxyXG4gICAgICAgICAgICAgICAgdG90YWw6IDAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXR1czogZmFsc2VcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBzZWFyY2ggPSB7XHJcbiAgICAgICAgICAgICAgICBfaWQ6IHF1ZXJ5Ll9pZCxcclxuICAgICAgICAgICAgICAgIGlzRGVsZXRlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAkb3I6IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHsgJHJlZ2V4OiAnLionICsgKHF1ZXJ5Py5rZXkgfHwgJycpICsgJy4qJyB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAuLi5nZXRBZG1pbkZpbHRlcignX2lkJylcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNsZWFyU2VhcmNoKHNlYXJjaCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCAkYWdncmVnYXRlID0gW1xyXG4gICAgICAgICAgICAgICAgeyAkbWF0Y2g6IHNlYXJjaCB9LFxyXG4gICAgICAgICAgICAgICAgeyAkc29ydDogeyBfaWQ6IC0xIH0gfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcIiRwcm9qZWN0XCI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmU6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXTtcclxuXHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb3VudGVyID0gYXdhaXQgU3RhdGVNb2RlbC5hZ2dyZWdhdGUoWy4uLiRhZ2dyZWdhdGUsIHsgJGNvdW50OiBcInRvdGFsXCIgfV0pO1xyXG4gICAgICAgICAgICByZXNwb25zZS5yZXN1bHQudG90YWwgPSBjb3VudGVyWzBdPy50b3RhbDtcclxuICAgICAgICAgICAgaWYgKGlzQWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZS5yZXN1bHQucGFnZSA9IDE7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZS5yZXN1bHQubGltaXQgPSByZXNwb25zZS5yZXN1bHQudG90YWw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlc3BvbnNlLnJlc3VsdC5kYXRhID0gYXdhaXQgU3RhdGVNb2RlbC5hZ2dyZWdhdGUoXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgLi4uJGFnZ3JlZ2F0ZSxcclxuICAgICAgICAgICAgICAgICAgICB7ICRsaW1pdDogcmVzcG9uc2UucmVzdWx0LmxpbWl0ICsgcmVzcG9uc2UucmVzdWx0LmxpbWl0ICogKHJlc3BvbnNlLnJlc3VsdC5wYWdlIC0gMSkgfSxcclxuICAgICAgICAgICAgICAgICAgICB7ICRza2lwOiByZXNwb25zZS5yZXN1bHQubGltaXQgKiAocmVzcG9uc2UucmVzdWx0LnBhZ2UgLSAxKSB9XHJcbiAgICAgICAgICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5yZXN1bHQuZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLm1lc3NhZ2UgPSBcIkRhdGEgZmV0Y2hlZFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc3BvbnNlLnN0YXR1c0NvZGUgPSAyMDA7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlLnN0YXR1cyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGUpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGFzeW5jIHNhdmVTdGF0ZShkYXRhKSB7XHJcbiAgICAgICAgY29uc3QgX2lkID0gZGF0YS5faWQ7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7IHN0YXR1c0NvZGU6IDQwMCwgbWVzc2FnZTogJ0Vycm9yIScsIHN0YXR1czogZmFsc2UgfTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgdHBsRGF0YSA9IF9pZCA/IGF3YWl0IFN0YXRlTW9kZWwuZmluZEJ5SWQoX2lkKSA6IG5ldyBTdGF0ZU1vZGVsKCk7XHJcbiAgICAgICAgICAgIHRwbERhdGEubmFtZSA9IGRhdGEubmFtZTtcclxuICAgICAgICAgICAgdHBsRGF0YS5pc0FjdGl2ZSA9IGRhdGEuaXNBY3RpdmU7XHJcblxyXG4gICAgICAgICAgICBhd2FpdCB0cGxEYXRhLnNhdmUoKTtcclxuXHJcbiAgICAgICAgICAgIHJlc3BvbnNlLm1lc3NhZ2UgPSBfaWQgPyBcIlN0YXRlIGlzIHVwZGF0ZWRcIiA6IFwiQSBuZXcgc3RhdGUgaXMgY3JlYXRlZFwiO1xyXG4gICAgICAgICAgICByZXNwb25zZS5zdGF0dXNDb2RlID0gMjAwO1xyXG4gICAgICAgICAgICByZXNwb25zZS5zdGF0dXMgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG5cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBkZWxldGVTdGF0ZShfaWQsIGNvbmQpIHtcclxuICAgICAgICBjbGVhclNlYXJjaCh7IGNvbmQgfSk7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7IHN0YXR1c0NvZGU6IDQwMCwgbWVzc2FnZTogJ0Vycm9yIScsIHN0YXR1czogZmFsc2UgfTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgYXdhaXQgU3RhdGVNb2RlbC51cGRhdGVPbmUoeyBfaWQsIC4uLmNvbmQgfSwgeyBpc0RlbGV0ZWQ6IHRydWUgfSk7XHJcblxyXG4gICAgICAgICAgICByZXNwb25zZS5tZXNzYWdlID0gXCJEZWxldGVkIHN1Y2Nlc3NmdWxseVwiO1xyXG4gICAgICAgICAgICByZXNwb25zZS5zdGF0dXNDb2RlID0gMjAwO1xyXG4gICAgICAgICAgICByZXNwb25zZS5zdGF0dXMgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuIG5vdCBkZWxldGUuIFNvbWV0aGluZyB3ZW50IHdyb25nLlwiKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgbGlzdERpc3RyaWN0KHF1ZXJ5LCBwYXJhbXMpIHtcclxuICAgICAgICBjb25zdCBpc0FsbCA9IHBhcmFtcy5pc0FsbCA9PT0gJ0FMTCc7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XHJcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcclxuICAgICAgICAgICAgbWVzc2FnZTogJ0RhdGEgbm90IGZvdW5kIScsXHJcbiAgICAgICAgICAgIHJlc3VsdDoge1xyXG4gICAgICAgICAgICAgICAgZGF0YTogW10sXHJcbiAgICAgICAgICAgICAgICBwYWdlOiBxdWVyeS5wYWdlICogMSA+IDAgPyBxdWVyeS5wYWdlICogMSA6IDEsXHJcbiAgICAgICAgICAgICAgICBsaW1pdDogcXVlcnkubGltaXQgKiAxID4gMCA/IHF1ZXJ5LmxpbWl0ICogMSA6IDIwLFxyXG4gICAgICAgICAgICAgICAgdG90YWw6IDAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXR1czogZmFsc2VcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBzZWFyY2ggPSB7XHJcbiAgICAgICAgICAgICAgICBfaWQ6IHF1ZXJ5Ll9pZCxcclxuICAgICAgICAgICAgICAgIGlzRGVsZXRlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAkb3I6IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHsgJHJlZ2V4OiAnLionICsgKHF1ZXJ5Py5rZXkgfHwgJycpICsgJy4qJyB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIHN0YXRlOiBxdWVyeS5zdGF0ZSA/IG1vbmdvb3NlLlR5cGVzLk9iamVjdElkKHF1ZXJ5LnN0YXRlKSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgLi4uZ2V0QWRtaW5GaWx0ZXIoJ3N0YXRlJywgJ19pZCcpXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjbGVhclNlYXJjaChzZWFyY2gpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgJGFnZ3JlZ2F0ZSA9IFtcclxuICAgICAgICAgICAgICAgIHsgJG1hdGNoOiBzZWFyY2ggfSxcclxuICAgICAgICAgICAgICAgIHsgJHNvcnQ6IHsgX2lkOiAtMSB9IH0sXHJcbiAgICAgICAgICAgICAgICAvLyB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgJGxvb2t1cDoge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBmcm9tOiAnc3RhdGVzJyxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgbG9jYWxGaWVsZDogJ3N0YXRlJyxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgZm9yZWlnbkZpZWxkOiAnX2lkJyxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgYXM6ICdzdGF0ZURldGFpbHMnLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBwaXBlbGluZTogW1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICRtYXRjaDoge2lzRGVsZXRlZDogZmFsc2V9XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB9LFxyXG4gICAgICAgICAgICAgICAgLy8geyAkdW53aW5kOiB7IHBhdGg6IFwiJHN0YXRlRGV0YWlsc1wiLCBwcmVzZXJ2ZU51bGxBbmRFbXB0eUFycmF5czogZmFsc2V9IH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCIkcHJvamVjdFwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZTogMSxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBdO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ZXIgPSBhd2FpdCBEaXN0cmljdE1vZGVsLmFnZ3JlZ2F0ZShbLi4uJGFnZ3JlZ2F0ZSwgeyAkY291bnQ6IFwidG90YWxcIiB9XSk7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlLnJlc3VsdC50b3RhbCA9IGNvdW50ZXJbMF0/LnRvdGFsO1xyXG4gICAgICAgICAgICBpZiAoaXNBbGwpIHtcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLnJlc3VsdC5wYWdlID0gMTtcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLnJlc3VsdC5saW1pdCA9IHJlc3BvbnNlLnJlc3VsdC50b3RhbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVzcG9uc2UucmVzdWx0LmRhdGEgPSBhd2FpdCBEaXN0cmljdE1vZGVsLmFnZ3JlZ2F0ZShcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICAuLi4kYWdncmVnYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIHsgJGxpbWl0OiByZXNwb25zZS5yZXN1bHQubGltaXQgKyByZXNwb25zZS5yZXN1bHQubGltaXQgKiAocmVzcG9uc2UucmVzdWx0LnBhZ2UgLSAxKSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsgJHNraXA6IHJlc3BvbnNlLnJlc3VsdC5saW1pdCAqIChyZXNwb25zZS5yZXN1bHQucGFnZSAtIDEpIH1cclxuICAgICAgICAgICAgICAgIF0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnJlc3VsdC5kYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UubWVzc2FnZSA9IFwiRGF0YSBmZXRjaGVkXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzcG9uc2Uuc3RhdHVzQ29kZSA9IDIwMDtcclxuICAgICAgICAgICAgcmVzcG9uc2Uuc3RhdHVzID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgYXN5bmMgc2F2ZURpc3RyaWN0KGRhdGEpIHtcclxuICAgICAgICBjb25zdCBfaWQgPSBkYXRhLl9pZDtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IHsgc3RhdHVzQ29kZTogNDAwLCBtZXNzYWdlOiAnRXJyb3IhJywgc3RhdHVzOiBmYWxzZSB9O1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCB0cGxEYXRhID0gX2lkID8gYXdhaXQgRGlzdHJpY3RNb2RlbC5maW5kQnlJZChfaWQpIDogbmV3IERpc3RyaWN0TW9kZWwoKTtcclxuXHJcbiAgICAgICAgICAgIHRwbERhdGEubmFtZSA9IGRhdGEubmFtZTtcclxuICAgICAgICAgICAgdHBsRGF0YS5pc0FjdGl2ZSA9IGRhdGEuaXNBY3RpdmU7XHJcbiAgICAgICAgICAgIHRwbERhdGEuc3RhdGUgPSBkYXRhLnN0YXRlO1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgdHBsRGF0YS5zYXZlKCk7XHJcblxyXG4gICAgICAgICAgICByZXNwb25zZS5tZXNzYWdlID0gX2lkID8gXCJEaXN0cmljdCBpcyB1cGRhdGVkXCIgOiBcIkEgbmV3IGRpc3RyaWN0IGlzIGNyZWF0ZWRcIjtcclxuICAgICAgICAgICAgcmVzcG9uc2Uuc3RhdHVzQ29kZSA9IDIwMDtcclxuICAgICAgICAgICAgcmVzcG9uc2Uuc3RhdHVzID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgYXN5bmMgZGVsZXRlRGlzdHJpY3QoX2lkLCBjb25kKSB7XHJcbiAgICAgICAgY2xlYXJTZWFyY2goeyBjb25kIH0pO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geyBzdGF0dXNDb2RlOiA0MDAsIG1lc3NhZ2U6ICdFcnJvciEnLCBzdGF0dXM6IGZhbHNlIH07XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGF3YWl0IERpc3RyaWN0TW9kZWwudXBkYXRlT25lKHsgX2lkLCAuLi5jb25kIH0sIHsgaXNEZWxldGVkOiB0cnVlIH0pO1xyXG5cclxuICAgICAgICAgICAgcmVzcG9uc2UubWVzc2FnZSA9IFwiRGVsZXRlZCBzdWNjZXNzZnVsbHlcIjtcclxuICAgICAgICAgICAgcmVzcG9uc2Uuc3RhdHVzQ29kZSA9IDIwMDtcclxuICAgICAgICAgICAgcmVzcG9uc2Uuc3RhdHVzID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG5cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbiBub3QgZGVsZXRlLiBTb21ldGhpbmcgd2VudCB3cm9uZy5cIilcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFzeW5jIGxpc3RUYWx1ayhxdWVyeSwgcGFyYW1zKSB7XHJcbiAgICAgICAgY29uc3QgaXNBbGwgPSBwYXJhbXMuaXNBbGwgPT09ICdBTEwnO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xyXG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdEYXRhIG5vdCBmb3VuZCEnLFxyXG4gICAgICAgICAgICByZXN1bHQ6IHtcclxuICAgICAgICAgICAgICAgIGRhdGE6IFtdLFxyXG4gICAgICAgICAgICAgICAgcGFnZTogcXVlcnkucGFnZSAqIDEgPiAwID8gcXVlcnkucGFnZSAqIDEgOiAxLFxyXG4gICAgICAgICAgICAgICAgbGltaXQ6IHF1ZXJ5LmxpbWl0ICogMSA+IDAgPyBxdWVyeS5saW1pdCAqIDEgOiAyMCxcclxuICAgICAgICAgICAgICAgIHRvdGFsOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGF0dXM6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3Qgc2VhcmNoID0ge1xyXG4gICAgICAgICAgICAgICAgX2lkOiBxdWVyeS5faWQsXHJcbiAgICAgICAgICAgICAgICBpc0RlbGV0ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgJG9yOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB7ICRyZWdleDogJy4qJyArIChxdWVyeT8ua2V5IHx8ICcnKSArICcuKicgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBkaXN0cmljdDogcXVlcnkuZGlzdHJpY3QgPyBtb25nb29zZS5UeXBlcy5PYmplY3RJZChxdWVyeS5kaXN0cmljdCkgOiAnJyxcclxuICAgICAgICAgICAgICAgIC4uLmdldEFkbWluRmlsdGVyKCdzdGF0ZScsICdkaXN0cmljdCcsICdfaWQnKVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgY2xlYXJTZWFyY2goc2VhcmNoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0ICRhZ2dyZWdhdGUgPSBbXHJcbiAgICAgICAgICAgICAgICB7ICRtYXRjaDogc2VhcmNoIH0sXHJcbiAgICAgICAgICAgICAgICB7ICRzb3J0OiB7IF9pZDogLTEgfSB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiJHByb2plY3RcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzdHJpY3Q6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF07XHJcblxyXG5cclxuICAgICAgICAgICAgY29uc3QgY291bnRlciA9IGF3YWl0IFRhbHVrTW9kZWwuYWdncmVnYXRlKFsuLi4kYWdncmVnYXRlLCB7ICRjb3VudDogXCJ0b3RhbFwiIH1dKTtcclxuICAgICAgICAgICAgcmVzcG9uc2UucmVzdWx0LnRvdGFsID0gY291bnRlclswXT8udG90YWw7XHJcbiAgICAgICAgICAgIGlmIChpc0FsbCkge1xyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UucmVzdWx0LnBhZ2UgPSAxO1xyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UucmVzdWx0LmxpbWl0ID0gcmVzcG9uc2UucmVzdWx0LnRvdGFsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXNwb25zZS5yZXN1bHQuZGF0YSA9IGF3YWl0IFRhbHVrTW9kZWwuYWdncmVnYXRlKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLiRhZ2dyZWdhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgeyAkbGltaXQ6IHJlc3BvbnNlLnJlc3VsdC5saW1pdCArIHJlc3BvbnNlLnJlc3VsdC5saW1pdCAqIChyZXNwb25zZS5yZXN1bHQucGFnZSAtIDEpIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyAkc2tpcDogcmVzcG9uc2UucmVzdWx0LmxpbWl0ICogKHJlc3BvbnNlLnJlc3VsdC5wYWdlIC0gMSkgfVxyXG4gICAgICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2UucmVzdWx0LmRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZS5tZXNzYWdlID0gXCJEYXRhIGZldGNoZWRcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXNwb25zZS5zdGF0dXNDb2RlID0gMjAwO1xyXG4gICAgICAgICAgICByZXNwb25zZS5zdGF0dXMgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG5cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBzYXZlVGFsdWsoZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IF9pZCA9IGRhdGEuX2lkO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geyBzdGF0dXNDb2RlOiA0MDAsIG1lc3NhZ2U6ICdFcnJvciEnLCBzdGF0dXM6IGZhbHNlIH07XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRwbERhdGEgPSBfaWQgPyBhd2FpdCBUYWx1a01vZGVsLmZpbmRCeUlkKF9pZCkgOiBuZXcgVGFsdWtNb2RlbCgpO1xyXG5cclxuICAgICAgICAgICAgdHBsRGF0YS5uYW1lID0gZGF0YS5uYW1lO1xyXG4gICAgICAgICAgICB0cGxEYXRhLnN0YXRlID0gZGF0YS5zdGF0ZTtcclxuICAgICAgICAgICAgdHBsRGF0YS5kaXN0cmljdCA9IGRhdGEuZGlzdHJpY3Q7XHJcbiAgICAgICAgICAgIHRwbERhdGEuaXNBY3RpdmUgPSBkYXRhLmlzQWN0aXZlO1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgdHBsRGF0YS5zYXZlKCk7XHJcblxyXG4gICAgICAgICAgICByZXNwb25zZS5tZXNzYWdlID0gX2lkID8gXCJUYWx1ayBpcyB1cGRhdGVkXCIgOiBcIkEgbmV3IFRhbHVrIGlzIGNyZWF0ZWRcIjtcclxuICAgICAgICAgICAgcmVzcG9uc2Uuc3RhdHVzQ29kZSA9IDIwMDtcclxuICAgICAgICAgICAgcmVzcG9uc2Uuc3RhdHVzID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgYXN5bmMgZGVsZXRlVGFsdWsoX2lkLCBjb25kKSB7XHJcbiAgICAgICAgY2xlYXJTZWFyY2goeyBjb25kIH0pO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geyBzdGF0dXNDb2RlOiA0MDAsIG1lc3NhZ2U6ICdFcnJvciEnLCBzdGF0dXM6IGZhbHNlIH07XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGF3YWl0IFRhbHVrTW9kZWwudXBkYXRlT25lKHsgX2lkLCAuLi5jb25kIH0sIHsgaXNEZWxldGVkOiB0cnVlIH0pO1xyXG5cclxuICAgICAgICAgICAgcmVzcG9uc2UubWVzc2FnZSA9IFwiRGVsZXRlZCBzdWNjZXNzZnVsbHlcIjtcclxuICAgICAgICAgICAgcmVzcG9uc2Uuc3RhdHVzQ29kZSA9IDIwMDtcclxuICAgICAgICAgICAgcmVzcG9uc2Uuc3RhdHVzID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG5cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbiBub3QgZGVsZXRlLiBTb21ldGhpbmcgd2VudCB3cm9uZy5cIilcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=